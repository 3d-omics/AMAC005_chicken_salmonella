[["index.html", "3D’omics | Poultry Salmonella trial Manuscript in prep Chapter 1 Introduction 1.1 Prepare the R environment", " 3D’omics | Poultry Salmonella trial Manuscript in prep Antton Alberdi1 2025-01-02 Chapter 1 Introduction This webbook contains all the code used for the study on the effect of probiotics on Salmonella infection in broiler chicken. 1.1 Prepare the R environment 1.1.1 Environment To reproduce all the analyses locally, clone this repository in your computer using: RStudio &gt; New Project &gt; Version Control &gt; Git And indicating the following git repository: https://github.com/3d-omics/AMAC005_salmonella_trial.git Once the R project has been created, follow the instructions and code chunks shown in this webbook. 1.1.2 Libraries The following R packages are required for the data analysis. # Base library(R.utils) library(knitr) library(tidyverse) library(devtools) library(tinytable) library(broom) library(broom.mixed) # For tree handling library(ape) library(phyloseq) library(phytools) # For plotting library(ggplot2) library(ggrepel) library(ggpubr) library(ggnewscale) library(gridExtra) library(ggtreeExtra) library(ggtree) library(ggh4x) library(corrplot) # For statistics library(microbiome) library(spaa) library(vegan) library(Rtsne) library(geiger) library(hilldiv2) library(distillR) library(ANCOMBC) library(lme4) library(Hmsc) library(igraph) University of Copenhagen, antton.alberdi@sund.ku.dk↩︎ "],["data-preparation.html", "Chapter 2 Data preparation 2.1 Filter and normalise data 2.2 Color scheme 2.3 Wrap working objects", " Chapter 2 Data preparation 2.0.1 Sample metadata sample_metadata &lt;- read_csv(&quot;data/sample_metadata.csv&quot;) 2.0.2 Genome metadata Relevant metadata of genomes is fetched from 2-3 files and merged into one genome metadata object for downstream analyses. 2.0.2.1 Dereplicated genomes Bins were initially dereplicated at 99%, and annotations generated for all resulting MAGs. A second dereplication was performed at 95% to yield species-representative genomes. This analysis is performed on that subset. The list of selected genomes is stored in the Wdb file generated by dRep. selected_genomes &lt;- read_csv(&quot;data/Wdb.csv&quot;) %&gt;% mutate(genome=str_replace_all(genome,&quot;\\\\.fa&quot;, &quot;&quot;)) %&gt;% pull(genome) length(selected_genomes) The dereplication yielded 223 species-representative genomes. 2.0.2.2 Taxonomy This is the raw taxonomy table generated by GTDBtk, which is simplified for downstream analyses. genome_taxonomy &lt;- read_tsv(&quot;data/gtdbtk.summary.tsv&quot;) %&gt;% rename(genome = user_genome) %&gt;% mutate(genome = str_replace_all(genome,&quot;\\\\.fa&quot;, &quot;&quot;)) %&gt;% # Filter only selected genomes (the 223 species-representatives) filter(genome %in% selected_genomes) %&gt;% separate(classification, c(&quot;domain&quot;,&quot;phylum&quot;,&quot;class&quot;,&quot;order&quot;,&quot;family&quot;,&quot;genus&quot;,&quot;species&quot;), sep =&quot;;&quot;) %&gt;% select(genome,domain,phylum,class,order,family,genus,species) 2.0.2.3 Genome quality The genomeInfo.csv outputed by dRep contains the genome quality information. genome_quality &lt;- read_csv(&quot;data/genomeInfo.csv&quot;) %&gt;% mutate(genome = str_remove(genome, &quot;\\\\.fa$&quot;)) %&gt;% # Filter only selected genomes (the 223 species-representatives) filter(genome %in% selected_genomes) %&gt;% select(genome, completeness, contamination, length) 2.0.2.4 Merged metadata object Merge taxonomy, length and quality information genome_metadata &lt;- genome_taxonomy %&gt;% left_join(genome_quality,by=&quot;genome&quot;) #join quality 2.0.3 Count table This is the document containing the number of sequencing reads from each sample have been mapped to each MAG. Note that this is the raw data that needs to be further processed before running any statistics on them. read_counts &lt;- read_tsv(&quot;data/coverm_genome_REF0015-g_mg_hybrid.0.95.count.tsv&quot;) %&gt;% rename_all(~ str_remove_all(., &quot;.lib1&quot;)) %&gt;% #simplify column names rename(genome = 1) %&gt;% select(all_of(c(&quot;genome&quot;,sample_metadata$sample))) %&gt;% # sort samples arrange(match(genome,genome_metadata$genome)) # sort genomes 2.0.4 Base hit table This is the document containing the number of nucleotide bases have been covered by at least one read in each sample and MAG. This information is used to calculate MAG coverage values. basehits &lt;- read_tsv(&quot;data/coverm_genome_REF0015-g_mg_hybrid.0.95.covered_bases.tsv&quot;) %&gt;% rename_all(~ str_remove_all(., &quot;.lib1&quot;)) %&gt;% #simplify column names rename(genome = 1) %&gt;% select(all_of(c(&quot;genome&quot;,sample_metadata$sample))) %&gt;% # sort samples arrange(match(genome,genome_metadata$genome)) # sort genomes 2.0.5 Genome tree This is the raw tree generated by GTDBtk, which needs to be pruned to obtain the phylogenetic tree of the genomes. Note that the archaeal tree is only generated if any archaeans are detected among the genomes. genome_tree &lt;- read.tree(&quot;data/gtdbtk.backbone.bac120.classify.tree&quot;) genome_tree$tip.label &lt;- str_replace_all(genome_tree$tip.label,&quot;&#39;&quot;, &quot;&quot;) #remove single quotes in MAG names genome_tree &lt;- keep.tip(genome_tree, tip=selected_genomes) # keep only MAG tips 2.0.6 MAG functional annotations This is the raw annotation table generated by DRAM, which is used to generate GIFT data using distillR. genome_annotations &lt;- read_tsv(&quot;data/annotations.tsv.xz&quot;) %&gt;% rename(gene=1,genome=2) total_genes &lt;- genome_annotations %&gt;% nrow() unanotated_genes &lt;- genome_annotations %&gt;% filter(is.na(ko_id) &amp; is.na(pfam_hits) &amp; is.na(cazy_ids)) %&gt;% nrow() annotated_genes &lt;- total_genes - unanotated_genes #Annotated percentage annotated_genes / total_genes 2.1 Filter and normalise data Raw data needs to be filtered and normalised to make it useful for downstream analyses. 2.1.1 Generate coverage table By dividing the number of base hits by the length of each genome, coverage values can be calculated. genome_coverage &lt;- basehits %&gt;% mutate(across(where(is.numeric), ~ ./genome_metadata$length)) 2.1.2 Coverage filtering Genomes that have less than 30% of their length covered by reads are turned into zeros to account for the random allocation of reads across genomes due to mapping heuristics. min_coverage=0.3 read_counts_filt &lt;- genome_coverage %&gt;% mutate(across(where(is.numeric), ~ ifelse(. &gt; min_coverage, 1, 0))) %&gt;% mutate(across(-1, ~ . * read_counts[[cur_column()]])) 2.1.3 Generate genome count table After filtering the low-coverage reads, read counts are transformed into genome counts using genome-length and read-length information. readlength=150 #change if sequencing read length is different genome_counts &lt;- read_counts %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) genome_counts_filt &lt;- read_counts_filt %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) 2.1.4 Distil functional annotations Raw functional annotations are distilled into genome-inferred functional traits to generate biologically more meaningful functional traits for downstream analyses. genome_gifts &lt;- distill(genome_annotations,GIFT_db,genomecol=2,annotcol=c(9,10,19)) 2.2 Color scheme AlberdiLab projects use unified color schemes developed for the Earth Hologenome Initiative, to facilitate figure interpretation. phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% pull(colors, name=phylum) order_colors &lt;- c(&quot;#08D1D1&quot;,&quot;#BF7022&quot;,&quot;#2EBC82&quot;,&quot;#2E91BC&quot;,&quot;#2E5ABC&quot;,&quot;#09CE8D&quot;,&quot;#E0A608&quot;,&quot;#097265&quot;,&quot;#AB56D8&quot;,&quot;#0AA01F&quot;,&quot;#274945&quot;,&quot;#4E397A&quot;,&quot;#B3265B&quot;,&quot;#2EBC45&quot;,&quot;#7F4561&quot;,&quot;#58BC2E&quot;,&quot;#BC2EA1&quot;,&quot;#6A52C6&quot;,&quot;#AD8D8D&quot;) treatment_colors &lt;- c(TG1=&quot;#4059AE&quot;,TG2=&quot;#6A9AC3&quot;,TG3=&quot;#97D8C4&quot;,TG4=&quot;#AFD699&quot;,TG5=&quot;#F3B942&quot;) 2.3 Wrap working objects In the last step, the objects that are needed for downstream analyses are stored in an R object. save(read_counts, read_counts_filt, genome_counts, genome_counts_filt, genome_tree, genome_metadata, genome_gifts, sample_metadata, phylum_colors, order_colors, treatment_colors, file = &quot;data/data.Rdata&quot;) read_counts: Number of reads mapped to each genome in each sample. Note this is the unfiltered and unnormalised raw community composition table. genome_counts: Number of genomes quantified in each sample, calculated through filtering and normalising read_counts. This is the community composition table to be used in downstream analyses unless otherwise stated. genome_tree: Phylogenetic tree of the genomes, to be employed in downstream phylogenetic analyses. genome_metadata: Taxonomic and quality information of the genomes. genome_gifts: Genome-inferred functional traits of the genomes, to be employed in downstream functional analyses. sample_metadata: Treatment/population and other relevant metadata of the samples. "],["mag-catalogue.html", "Chapter 3 MAG catalogue 3.1 Genome phylogeny 3.2 Genome quality 3.3 Taxonomy overview 3.4 Functional overview 3.5 Functional ordination", " Chapter 3 MAG catalogue load(&quot;data/data.Rdata&quot;) 3.1 Genome phylogeny # Generate the phylum color heatmap phylum_heatmap &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(genome,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) # Generate basal tree circular_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% # extend to ultrametric for the sake of visualisation ggtree(., layout=&quot;fan&quot;, open.angle=10, size=0.5) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum ring circular_tree &lt;- gheatmap(circular_tree, phylum_heatmap, offset=0.55, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + geom_tiplab2(size=1, hjust=-0.1) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) # Flush color scale to enable a new color scheme in the next ring circular_tree &lt;- circular_tree + new_scale_fill() # Add completeness ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_gradient(low = &quot;#d1f4ba&quot;, high = &quot;#f4baba&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=completeness, y=genome, fill=contamination), offset = 0.55, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add genome-size ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_manual(values = &quot;#cccccc&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=length, y=genome), offset = 0.05, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add text circular_tree &lt;- circular_tree + annotate(&#39;text&#39;, x=2.7, y=0, label=&#39; Phylum&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.1, y=0, label=&#39; Genome quality&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.5, y=0, label=&#39; Genome size&#39;, family=&#39;arial&#39;, size=3.5) #Plot circular tree circular_tree %&gt;% open_tree(30) %&gt;% rotate_tree(90) 3.2 Genome quality tibble(Completeness= paste0(round(genome_metadata$completeness %&gt;% mean(),2), &quot;±&quot;, round(genome_metadata$completeness %&gt;% sd(),2)), Contamination= paste0(round(genome_metadata$contamination %&gt;% mean(),2), &quot;±&quot;, round(genome_metadata$contamination %&gt;% sd(),2))) %&gt;% tt() .table td.tinytable_css_idx4qz0ug40wrrj8wk5724, .table th.tinytable_css_idx4qz0ug40wrrj8wk5724 { border-bottom: solid 0.1em #d3d8dc; } Completeness Contamination 95.22±6.1 1.66±2.21 #Generate quality biplot genome_biplot &lt;- genome_metadata %&gt;% select(c(genome,domain,phylum,completeness,contamination,length)) %&gt;% arrange(match(genome, rev(genome_tree$tip.label))) %&gt;% #sort MAGs according to phylogenetic tree ggplot(aes(x=completeness,y=contamination,size=length,color=phylum)) + geom_point(alpha=0.7) + xlim(c(50,100)) + ylim(c(10,0)) + scale_color_manual(values=phylum_colors) + labs(y= &quot;Contamination&quot;, x = &quot;Completeness&quot;) + theme_classic() + theme(legend.position = &quot;none&quot;) #Generate contamination boxplot genome_contamination &lt;- genome_metadata %&gt;% ggplot(aes(y=contamination)) + ylim(c(10,0)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0.40, 0),&quot;inches&quot;)) #add bottom-margin (top, right, bottom, left) #Generate completeness boxplot genome_completeness &lt;- genome_metadata %&gt;% ggplot(aes(x=completeness)) + xlim(c(50,100)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0, 0.50),&quot;inches&quot;)) #add left-margin (top, right, bottom, left) #Render composite figure grid.arrange(grobs = list(genome_completeness,genome_biplot,genome_contamination), layout_matrix = rbind(c(1,1,1,1,1,1,1,1,1,1,1,4), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3))) 3.3 Taxonomy overview Number of new species: genome_metadata %&gt;% filter(species==&quot;s__&quot;) %&gt;% nrow() [1] 25 3.4 Functional overview order_heatmap &lt;- genome_metadata %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(genome,order) %&gt;% column_to_rownames(var = &quot;genome&quot;) # Aggregate basal GIFT into elements function_table &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) # Generate basal tree function_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips function_tree &lt;- gheatmap(function_tree, order_heatmap, offset=0, width=0.1, colnames=FALSE) + scale_fill_manual(values=order_colors) + labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() #Add functions heatmap function_tree &lt;- gheatmap(function_tree, function_table, offset=0.5, width=3.5, colnames=FALSE) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;#f4f4f4&quot;, high = &quot;#666666&quot;, na.value=&quot;white&quot;) + labs(fill=&quot;GIFT&quot;) function_tree + theme(legend.position = &quot;none&quot;) ## Functional distances functional_distances &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) %&gt;% as.data.frame() %&gt;% stats::dist(., method = &quot;manhattan&quot;) / ncol(genome_gifts[genome_metadata$genome, ]) mean(functional_distances) [1] 0.09263822 sd(functional_distances) [1] 0.03083769 max(functional_distances) [1] 0.3096508 3.5 Functional ordination PCoA functional ordination with PCA loadings. gift_pcoa &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) %&gt;% as.data.frame() %&gt;% vegdist(method=&quot;euclidean&quot;) %&gt;% pcoa() gift_pcoa_rel_eigen &lt;- gift_pcoa$values$Relative_eig[1:10] # Get genome positions gift_pcoa_vectors &lt;- gift_pcoa$vectors %&gt;% #extract vectors as.data.frame() %&gt;% select(Axis.1,Axis.2) # keep the first 2 axes gift_pcoa_eigenvalues &lt;- gift_pcoa$values$Eigenvalues[c(1,2)] gift_pcoa_gifts &lt;- cov(genome_gifts, scale(gift_pcoa_vectors)) %*% diag((gift_pcoa_eigenvalues/(nrow(genome_gifts)-1))^(-0.5)) %&gt;% as.data.frame() %&gt;% rename(Axis.1=1,Axis.2=2) %&gt;% rownames_to_column(var=&quot;label&quot;) %&gt;% #get function summary vectors mutate(func=substr(label,1,3)) %&gt;% group_by(func) %&gt;% summarise(Axis.1=mean(Axis.1), Axis.2=mean(Axis.2)) %&gt;% rename(label=func) %&gt;% filter(!label %in% c(&quot;S01&quot;,&quot;S02&quot;,&quot;S03&quot;)) scale &lt;- 15 # scale for vector loadings gift_pcoa_vectors %&gt;% rownames_to_column(var=&quot;genome&quot;) %&gt;% left_join(genome_metadata, by=&quot;genome&quot;) %&gt;% ggplot() + #genome positions scale_color_manual(values=order_colors)+ geom_point(aes(x=Axis.1,y=Axis.2, color=order, size=length), alpha=0.9, shape=16) + #scale_color_manual(values=phylum_colors) + scale_size_continuous(range = c(0.1,5)) + #loading positions geom_segment(data=gift_pcoa_gifts, aes(x=0, y=0, xend=Axis.1 * scale, yend=Axis.2 * scale), arrow = arrow(length = unit(0.3, &quot;cm&quot;), type = &quot;open&quot;, angle = 25), linewidth = 0.5, color = &quot;black&quot;) + #Primary and secondary scale adjustments scale_x_continuous(name = paste0(&quot;PCoA1 (&quot;,round(gift_pcoa_rel_eigen[1]*100, digits = 2), &quot; %)&quot;), sec.axis = sec_axis(~ . / scale, name = &quot;Loadings on PCoA1&quot;) ) + scale_y_continuous(name = paste0(&quot;PCoA2 (&quot;,round(gift_pcoa_rel_eigen[2]*100, digits = 2), &quot; %)&quot;), sec.axis = sec_axis(~ . / scale, name = &quot;Loadings on PCoA2&quot;) ) + geom_label_repel(data = gift_pcoa_gifts, aes(label = label, x = Axis.1 * scale, y = Axis.2 * scale), segment.color = &#39;transparent&#39;) + theme_minimal() + theme(legend.position = &quot;none&quot;) gift_pcoa_vectors %&gt;% rownames_to_column(var=&quot;genome&quot;) %&gt;% left_join(genome_metadata, by=&quot;genome&quot;) %&gt;% ggplot(aes(x=Axis.1, y=length)) + geom_smooth() + theme_minimal() + theme(legend.position = &quot;none&quot;) genome_gifts %&gt;% to.elements(., GIFT_db) %&gt;% to.functions(., GIFT_db) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;genome&quot;) %&gt;% left_join(genome_metadata, by=&quot;genome&quot;) %&gt;% left_join(gift_pcoa_vectors %&gt;% rownames_to_column(var=&quot;genome&quot;), by=&quot;genome&quot;) %&gt;% ggplot(aes(x=Axis.2, y=D02)) + geom_smooth() + theme_minimal() + theme(legend.position = &quot;none&quot;) genome_gifts %&gt;% to.elements(., GIFT_db) %&gt;% to.functions(., GIFT_db) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;genome&quot;) %&gt;% left_join(genome_metadata, by=&quot;genome&quot;) %&gt;% left_join(gift_pcoa_vectors %&gt;% rownames_to_column(var=&quot;genome&quot;), by=&quot;genome&quot;) %&gt;% ggplot(aes(x=Axis.2, y=D01)) + geom_smooth() + theme_minimal() + theme(legend.position = &quot;none&quot;) "],["community-composition.html", "Chapter 4 Community composition 4.1 Taxonomy overview 4.2 Taxonomy boxplot 4.3 Functional overview 4.4 Alpha diversity 4.5 Alpha diversity vs. MCI", " Chapter 4 Community composition load(&quot;data/data.Rdata&quot;) 4.1 Taxonomy overview 4.1.1 Stacked barplot genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata filter(count &gt; 0) %&gt;% #filter 0 counts ggplot(., aes(x=sample,y=count, fill=order, group=order)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=order_colors) + facet_nested(. ~ treatment + day, scales=&quot;free&quot;, space=&quot;free&quot;) + #facet per day and treatment guides(fill = guide_legend(ncol = 1)) + theme(axis.text.x=element_blank(), axis.title.x = element_blank(), panel.background = element_blank(), panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;)) + labs(fill=&quot;Phylum&quot;,y = &quot;Relative abundance&quot;,x=&quot;Samples&quot;) + theme(legend.position = &quot;none&quot;) ### Phylum relative abundances phylum_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% group_by(sample,phylum) %&gt;% summarise(relabun=sum(count)) phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(mean=mean(relabun, na.rm=T),sd=sd(relabun, na.rm=T)) %&gt;% arrange(-mean) %&gt;% tt() .table td.tinytable_css_idtj9xcuoer0dvy1rqqrij, .table th.tinytable_css_idtj9xcuoer0dvy1rqqrij { border-bottom: solid 0.1em #d3d8dc; } phylum mean sd p__Bacillota_A 0.9263387454 0.052472019 p__Bacillota 0.0311457034 0.020581919 p__Pseudomonadota 0.0213337036 0.031447325 p__Bacteroidota 0.0173904491 0.041859646 p__Actinomycetota 0.0029250266 0.002033819 p__Verrucomicrobiota 0.0008663719 0.003274428 phylum_arrange &lt;- phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(mean=mean(relabun)) %&gt;% arrange(-mean) %&gt;% select(phylum) %&gt;% pull() phylum_summary %&gt;% filter(phylum %in% phylum_arrange) %&gt;% mutate(phylum=factor(phylum,levels=rev(phylum_arrange))) %&gt;% ggplot(aes(x=relabun, y=phylum, group=phylum, color=phylum)) + scale_color_manual(values=phylum_colors[rev(phylum_arrange)]) + geom_jitter(alpha=0.5) + theme_minimal() + theme(legend.position=&quot;none&quot;) + labs(y=&quot;Phylum&quot;,x=&quot;Relative abundance&quot;) phylum_arrange &lt;- phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(mean=mean(relabun)) %&gt;% arrange(-mean) %&gt;% select(phylum) %&gt;% pull() phylum_summary %&gt;% left_join(sample_metadata,by=&quot;sample&quot;) %&gt;% filter(phylum %in% phylum_arrange) %&gt;% mutate(phylum=factor(phylum,levels=rev(phylum_arrange))) %&gt;% filter(treatment!=&quot;TG0&quot;) %&gt;% ggplot(aes(x=day, y=relabun, group=phylum, color=phylum, fill=phylum)) + scale_color_manual(values=phylum_colors[rev(phylum_arrange)]) + scale_fill_manual(values=phylum_colors[rev(phylum_arrange)]) + geom_jitter(width=0.3) + geom_smooth(method=&quot;loess&quot;,se=TRUE) + theme_minimal() + facet_wrap(. ~ treatment, nrow=1) + theme(legend.position=&quot;none&quot;) + labs(y=&quot;Phylum&quot;,x=&quot;Days&quot;) 4.2 Taxonomy boxplot 4.2.1 Family family_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,family) %&gt;% summarise(relabun=sum(count)) family_summary %&gt;% group_by(family) %&gt;% summarise(mean=mean(relabun, na.rm=T),sd=sd(relabun, na.rm=T)) %&gt;% arrange(-mean) %&gt;% tt() .table td.tinytable_css_idkfpet6zgei98y7oylbwq, .table th.tinytable_css_idkfpet6zgei98y7oylbwq { border-bottom: solid 0.1em #d3d8dc; } family mean sd f__Lachnospiraceae 4.329063e-01 0.1040793532 f__Oscillospiraceae 1.377885e-01 0.0423221647 f__Ruminococcaceae 9.281622e-02 0.0673953782 f__Borkfalkiaceae 8.719646e-02 0.0752380263 f__Acutalibacteraceae 8.093733e-02 0.0315079409 f__Butyricicoccaceae 5.513905e-02 0.0299466932 f__Enterobacteriaceae 2.133370e-02 0.0314473254 f__Anaerotignaceae 1.939008e-02 0.0166309768 f__Rikenellaceae 1.739045e-02 0.0418596462 f__Coprobacillaceae 1.183006e-02 0.0104369897 f__CAG-508 1.095063e-02 0.0262151388 f__Lactobacillaceae 7.712804e-03 0.0068350532 f__Erysipelotrichaceae 3.961127e-03 0.0075083374 f__CAJFEE01 3.787948e-03 0.0082436691 f__Eggerthellaceae 2.733944e-03 0.0019639378 f__UBA1750 2.472356e-03 0.0072042453 f__Monoglobaceae 2.000573e-03 0.0046527638 f__UBA1381 1.892527e-03 0.0035251341 f__UBA660 1.601667e-03 0.0101286199 f__CAG-274 1.095219e-03 0.0039707980 f__Enterococcaceae 1.039147e-03 0.0043240156 f__Streptococcaceae 8.707222e-04 0.0030291486 f__Akkermansiaceae 8.663719e-04 0.0032744284 f__CAG-314 7.266243e-04 0.0021075449 f__Peptostreptococcaceae 4.572793e-04 0.0006294381 f__CAG-74 3.946608e-04 0.0018794730 f__CAG-313 2.087340e-04 0.0012151482 f__Bifidobacteriaceae 1.910823e-04 0.0006867560 f__Paenibacillaceae 1.334933e-04 0.0008636227 f__Clostridiaceae 8.794823e-05 0.0009307566 f__Anaerovoracaceae 8.700195e-05 0.0001931964 family_arrange &lt;- family_summary %&gt;% group_by(family) %&gt;% summarise(mean=sum(relabun, na.rm=TRUE)) %&gt;% arrange(-mean) %&gt;% select(family) %&gt;% pull() # Per day family_summary %&gt;% left_join(genome_metadata %&gt;% select(family,phylum) %&gt;% unique(),by=join_by(family==family)) %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% filter(family %in% family_arrange[1:20]) %&gt;% mutate(family=factor(family,levels=rev(family_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=family, group=family, color=phylum)) + scale_color_manual(values=phylum_colors[-8]) + geom_jitter(alpha=0.5) + facet_grid(.~day)+ theme_minimal() + labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) # Per treatment family_summary %&gt;% left_join(genome_metadata %&gt;% select(family,phylum) %&gt;% unique(),by=join_by(family==family)) %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% filter(family %in% family_arrange[1:20]) %&gt;% mutate(family=factor(family,levels=rev(family_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=family, group=family, color=phylum)) + scale_color_manual(values=phylum_colors[-8]) + geom_jitter(alpha=0.5) + facet_grid(.~treatment)+ theme_minimal() + labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) 4.2.2 Genus genus_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,phylum,genus) %&gt;% summarise(relabun=sum(count)) %&gt;% filter(genus != &quot;g__&quot;) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) genus_summary_sort &lt;- genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=mean(relabun, na.rm=T),sd=sd(relabun, na.rm=T)) %&gt;% arrange(-mean) genus_summary_sort %&gt;% tt() .table td.tinytable_css_idl4pr9uoktl07j42ywvgb, .table th.tinytable_css_idl4pr9uoktl07j42ywvgb { border-bottom: solid 0.1em #d3d8dc; } genus mean sd Eisenbergiella 1.445156e-01 0.0883905286 Blautia 5.916810e-02 0.0505543219 Agathobaculum 5.322314e-02 0.0301610831 Mediterraneibacter 5.290562e-02 0.0435215131 Caccovicinus 4.476313e-02 0.0321768001 Flavonifractor 3.453579e-02 0.0271724191 Lawsonibacter 3.375375e-02 0.0169043070 Dysosmobacter 3.258327e-02 0.0162310449 Lachnoclostridium_A 3.220221e-02 0.0269217326 Borkfalkia 3.204880e-02 0.0360383686 Coproplasma 3.066065e-02 0.0539482783 Merdivicinus 2.864373e-02 0.0309516849 Acutalibacter 2.691433e-02 0.0176707958 Enterocloster 2.516145e-02 0.0137469924 Gallimonas 1.998859e-02 0.0345141515 Gemmiger 1.926366e-02 0.0297015190 Anaeromassilibacillus 1.916098e-02 0.0145425120 Merdisoma 1.769360e-02 0.0192752166 Alistipes 1.739045e-02 0.0418596462 Escherichia 1.632474e-02 0.0241923609 UMGS1370 1.615394e-02 0.0372379577 Negativibacillus 1.544956e-02 0.0121601465 Anaerotignum 1.523550e-02 0.0123401837 Intestinimonas 1.263498e-02 0.0119940206 Pelethomonas 1.259604e-02 0.0218433912 Choladocola 1.184133e-02 0.0140509068 Onthovicinus 1.026027e-02 0.0122805507 Fournierella 1.006317e-02 0.0483977313 Faecousia 8.839579e-03 0.0131441523 UBA1417 8.343485e-03 0.0088859150 Thomasclavelia 8.226498e-03 0.0095251673 Copromonas 7.196101e-03 0.0074936185 Clostridium_Q 7.095562e-03 0.0108851076 Faecalibacterium 6.409228e-03 0.0283842543 CAG-269 5.550825e-03 0.0209272065 Lactobacillus 4.431109e-03 0.0061421622 Fimenecus 4.336314e-03 0.0145370351 Scatosoma 4.182029e-03 0.0093080381 CAG-273 4.082432e-03 0.0133584607 Faeciplasma 4.043975e-03 0.0116168407 Harrysmithimonas 3.787948e-03 0.0082436691 Massilimicrobiota 3.603563e-03 0.0056940870 Anaerotruncus 3.600088e-03 0.0028485188 Ruthenibacterium 3.524271e-03 0.0162325912 Blautia_A 3.017374e-03 0.0074140508 Klebsiella 2.898479e-03 0.0077490024 Ligilactobacillus 2.584617e-03 0.0041317157 Spyradocola 2.472356e-03 0.0072042453 Fimicola 2.375286e-03 0.0146709499 Merdibacter 2.277474e-03 0.0062077492 Rubneribacter 2.275614e-03 0.0016954158 Heritagella 2.265200e-03 0.0081259552 Caccousia 2.225811e-03 0.0063187280 Gallacutalibacter 2.183300e-03 0.0026543679 Eubacterium_R 2.149909e-03 0.0060679476 Roslinia 2.000573e-03 0.0046527638 Anaerobutyricum 1.951366e-03 0.0020592442 Pseudobutyricicoccus 1.804699e-03 0.0041057861 Proteus 1.795748e-03 0.0042092912 Clostridium_AQ 1.573753e-03 0.0037519678 Ornithomonoglobus 1.402383e-03 0.0034000890 Sellimonas 1.355524e-03 0.0014000810 Hungatella_B 1.295591e-03 0.0024858996 CAG-302 1.251232e-03 0.0093271964 Coprocola 1.232176e-03 0.0029180886 Merdimonas 1.042921e-03 0.0018959126 CAG-245 9.909064e-04 0.0055208507 Pullilachnospira 8.877658e-04 0.0019116542 Anaerostipes 8.807228e-04 0.0016493466 Streptococcus 8.707222e-04 0.0030291486 Akkermansia 8.663719e-04 0.0032744284 Tyzzerella 8.549861e-04 0.0039467559 Galloscillospira_A 8.453837e-04 0.0039969277 Fimimorpha 8.178870e-04 0.0038043652 Ruminococcus_G 8.166585e-04 0.0022527243 Lachnoclostridium_B 8.018810e-04 0.0014303087 Scybalenecus 7.674383e-04 0.0048805441 Heteroclostridium 7.266243e-04 0.0021075449 Scatomorpha 7.146354e-04 0.0036272957 Limosilactobacillus 6.970782e-04 0.0019160211 An181 6.754902e-04 0.0017219605 Faecivivens 5.889048e-04 0.0016432903 Egerieicola 5.367254e-04 0.0017162579 Enterococcus_B 4.665754e-04 0.0018265861 Gordonibacter 4.583304e-04 0.0007654231 Romboutsia 4.572793e-04 0.0006294381 CAJFUH01 4.375669e-04 0.0009959092 Pararuminococcus 4.308149e-04 0.0015265075 Pullichristensenella 3.946608e-04 0.0018794730 Enterococcus 3.933570e-04 0.0034471452 UBA4716 3.892234e-04 0.0014028047 Avoscillospira 3.723899e-04 0.0038117569 Scatavimonas 3.692015e-04 0.0010089017 Metalachnospira 3.521580e-04 0.0010102879 Caccomorpha 3.487812e-04 0.0030560594 UMGS775 3.163978e-04 0.0012014435 Salmonella 3.147373e-04 0.0008102992 Caccenecus 3.143350e-04 0.0033266085 Evtepia 2.842658e-04 0.0005804857 Enterenecus 2.411763e-04 0.0011008124 Gallispira 2.402329e-04 0.0006521117 HGM12545 2.269032e-04 0.0008091141 JAETTH01 2.141598e-04 0.0012567610 CAG-313 2.087340e-04 0.0012151482 Neoanaerotignum_A 1.949623e-04 0.0006113248 Bifidobacterium 1.910823e-04 0.0006867560 Enterococcus_D 1.792150e-04 0.0006369121 Avimicrobium 1.703215e-04 0.0004572784 HGM12998 1.675215e-04 0.0004945362 Timburyella 1.411641e-04 0.0005176237 Paenibacillus_A 1.334933e-04 0.0008636227 Butyricicoccus 1.112143e-04 0.0006691107 UMGS856 1.105091e-04 0.0005845197 Holdemania 1.099001e-04 0.0004731983 Ornithomonoglobus_A 1.009201e-04 0.0004893389 Fimivicinus 9.405076e-05 0.0009547374 Angelakisella 9.176895e-05 0.0004511442 Sarcina 8.794823e-05 0.0009307566 Alangreenwoodia 8.700195e-05 0.0001931964 RUG626 6.149174e-05 0.0003482508 Catenibacillus 5.889514e-05 0.0005067441 RUG591 3.610048e-05 0.0003820515 CAJFPI01 3.504625e-05 0.0001286358 Acetatifactor 3.183280e-05 0.0003368866 Pediococcus 0.000000e+00 0.0000000000 genus_arrange &lt;- genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=sum(relabun)) %&gt;% filter(genus != &quot;g__&quot;)%&gt;% arrange(-mean) %&gt;% select(genus) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) %&gt;% pull() #Per day genus_summary %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% mutate(genus=factor(genus, levels=rev(genus_summary_sort %&gt;% pull(genus)))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=genus, group=genus, color=phylum)) + scale_color_manual(values=phylum_colors) + geom_jitter(alpha=0.5) + facet_grid(.~day)+ theme_minimal() + labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) #Per treatment genus_summary %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% mutate(genus=factor(genus, levels=rev(genus_summary_sort %&gt;% pull(genus)))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=genus, group=genus, color=phylum)) + scale_color_manual(values=phylum_colors) + geom_jitter(alpha=0.5) + facet_grid(.~treatment)+ theme_minimal() + labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) 4.2.3 Salmonella enterica salmonella_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata filter(genome==&quot;GPB:bin_000051&quot;) %&gt;% #group_by(sample, species, day, treatment) %&gt;% #summarise(relabun=sum(count), .groups=&quot;drop&quot;) %&gt;% filter(species != &quot;s__&quot;) salmonella_summary %&gt;% select(-species) %&gt;% filter(treatment != &quot;TG0&quot;) %&gt;% group_by(day, treatment) %&gt;% summarise(mean=mean(count, na.rm=T),sd=sd(count, na.rm=T)) %&gt;% mutate(salmonella=paste0(mean * 100,&quot; ± &quot;, sd*100)) %&gt;% select(-c(mean,sd)) %&gt;% pivot_wider(names_from = &quot;day&quot;, values_from = &quot;salmonella&quot;) %&gt;% tt() .table td.tinytable_css_id59l1q29n1ki3bpssfmzj, .table th.tinytable_css_id59l1q29n1ki3bpssfmzj { border-bottom: solid 0.1em #d3d8dc; } treatment 7 14 21 28 35 TG1 0 ± 0 0 ± 0 0 ± 0 0.0241551432240449 ± 0.033382187982062 0 ± 0 TG2 0.242359007365227 ± 0.283469447128929 0 ± 0 0 ± 0 0.0386581717315069 ± 0.0230783075441766 0.0358379137922966 ± 0.0543374342307738 TG3 0.113298245608306 ± 0.0195711543058188 0 ± 0 0 ± 0 0.0179850913593979 ± 0.0402158868611578 0.0479331332811194 ± 0.0520647652609058 TG4 0.151044112426683 ± 0.159517071319007 0 ± 0 0 ± 0 0.064716903391552 ± 0.0900049874152957 0.012025539948005 ± 0.0268899247898786 TG5 0.170793630800146 ± 0.0273961354484702 0.0202299784310606 ± 0.0452356069552061 0 ± 0 0 ± 0 0 ± 0 4.2.4 Probiotics genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% filter(genome %in% c(&quot;GEXTRA:bin_000001&quot;,&quot;GEXTRA:bin_000002&quot;,&quot;GEXTRA:bin_000004&quot;,&quot;GPB:bin_000025&quot;,&quot;GEXTRA:bin_000006&quot;)) %&gt;% select(-genus) %&gt;% filter(treatment != &quot;TG0&quot;) %&gt;% group_by(day, treatment) %&gt;% summarise(mean=mean(count, na.rm=T),sd=sd(count, na.rm=T)) %&gt;% mutate(salmonella=paste0(mean * 100,&quot; ± &quot;, sd*100)) %&gt;% select(-c(mean,sd)) %&gt;% pivot_wider(names_from = &quot;day&quot;, values_from = &quot;salmonella&quot;) %&gt;% tt() .table td.tinytable_css_id7o69l3h6fgxdchgntjv8, .table th.tinytable_css_id7o69l3h6fgxdchgntjv8 { border-bottom: solid 0.1em #d3d8dc; } treatment 7 14 21 28 35 TG1 0 ± 0 0 ± 0 0 ± 0 0 ± 0 0 ± 0 TG2 0 ± 0 0 ± 0 0 ± 0 0 ± 0 0 ± 0 TG3 0 ± 0 0.0235235806846099 ± 0.117617903423049 0.0981598054504961 ± 0.25535188561404 0.0816638450870714 ± 0.184343495413486 0.081541923405096 ± 0.1769845972708 TG4 0.0695611912789772 ± 0.15573979801665 0.257345690121293 ± 0.536494709196875 0.154303615899709 ± 0.332387661558835 0.0843527344384325 ± 0.200118689108087 0.119836568122253 ± 0.249474582149052 TG5 0.141611150695204 ± 0.30739741992713 0.233696277462193 ± 0.528055185240311 0 ± 0 0 ± 0 0 ± 0 genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% filter(species==&quot;s__Ligilactobacillus salivarius&quot;) %&gt;% filter(species != &quot;s__&quot;) %&gt;% select(-species) %&gt;% filter(treatment != &quot;TG0&quot;) %&gt;% group_by(day, treatment) %&gt;% summarise(mean=mean(count, na.rm=T),sd=sd(count, na.rm=T)) %&gt;% mutate(salmonella=paste0(mean * 100,&quot; ± &quot;, sd*100)) %&gt;% select(-c(mean,sd)) %&gt;% pivot_wider(names_from = &quot;day&quot;, values_from = &quot;salmonella&quot;) %&gt;% tt() .table td.tinytable_css_idqo6u1yoy45b6qgw35bii, .table th.tinytable_css_idqo6u1yoy45b6qgw35bii { border-bottom: solid 0.1em #d3d8dc; } treatment 7 14 21 28 35 TG1 0 ± 0 0 ± 0 0 ± 0 0 ± 0 0 ± 0 TG2 0 ± 0 0 ± 0 0 ± 0 0 ± 0 0 ± 0 TG3 0 ± 0 0.117617903423049 ± 0.263001627424943 0.49079902725248 ± 0.387741960287886 0.408319225435357 ± 0.192796669959423 0.40770961702548 ± 0.14735723331951 TG4 0.347805956394886 ± 0.156912118204287 1.25704020617654 ± 0.390955403217101 0.771518079498544 ± 0.260094594996096 0.406859224366084 ± 0.276495317467263 0.599182840611264 ± 0.120022191063496 TG5 0.70805575347602 ± 0.219749502734166 1.08999800550827 ± 0.700552308855792 0 ± 0 0 ± 0 0 ± 0 genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% filter(species==&quot;s__Bifidobacterium animalis&quot;) %&gt;% filter(species != &quot;s__&quot;) %&gt;% select(-species) %&gt;% filter(treatment != &quot;TG0&quot;) %&gt;% group_by(day, treatment) %&gt;% summarise(mean=mean(count, na.rm=T),sd=sd(count, na.rm=T)) %&gt;% mutate(salmonella=paste0(mean * 100,&quot; ± &quot;, sd*100)) %&gt;% select(-c(mean,sd)) %&gt;% pivot_wider(names_from = &quot;day&quot;, values_from = &quot;salmonella&quot;) %&gt;% tt() .table td.tinytable_css_idgaakjcmwdlhyrqhft4z9, .table th.tinytable_css_idgaakjcmwdlhyrqhft4z9 { border-bottom: solid 0.1em #d3d8dc; } treatment 7 14 21 28 35 TG1 0 ± 0 0 ± 0 0 ± 0 0 ± 0 0 ± 0 TG2 0 ± 0 0 ± 0 0 ± 0 0 ± 0 0 ± 0 TG3 0 ± 0 0 ± 0 0 ± 0 0 ± 0 0 ± 0 TG4 0 ± 0 0.0296882444299303 ± 0.0593764888598606 0 ± 0 0 ± 0 0 ± 0 TG5 0 ± 0 0.0784833818026937 ± 0.175494176814893 0 ± 0 0 ± 0 0 ± 0 genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% filter(species==&quot;s__Limosilactobacillus reuteri&quot;) %&gt;% filter(species != &quot;s__&quot;) %&gt;% select(-species) %&gt;% filter(treatment != &quot;TG0&quot;) %&gt;% group_by(day, treatment) %&gt;% summarise(mean=mean(count, na.rm=T),sd=sd(count, na.rm=T)) %&gt;% mutate(salmonella=paste0(mean * 100,&quot; ± &quot;, sd*100)) %&gt;% select(-c(mean,sd)) %&gt;% pivot_wider(names_from = &quot;day&quot;, values_from = &quot;salmonella&quot;) %&gt;% tt() .table td.tinytable_css_id9hv6tf1i4v3lgtlakac6, .table th.tinytable_css_id9hv6tf1i4v3lgtlakac6 { border-bottom: solid 0.1em #d3d8dc; } treatment 7 14 21 28 35 TG1 0 ± 0 0 ± 0 0 ± 0 0 ± 0 0 ± 0 TG2 0 ± 0 0 ± 0 0 ± 0 0 ± 0 0 ± 0 TG3 0 ± 0 0 ± 0 0 ± 0 0 ± 0 0 ± 0 TG4 0 ± 0 0 ± 0 0 ± 0 0.0149044478260783 ± 0.03332735850621 0 ± 0 TG5 0 ± 0 0 ± 0 0 ± 0 0 ± 0 0 ± 0 4.3 Functional overview genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% filter(!is.na(day)) %&gt;% group_by(genome,treatment,day) %&gt;% summarise(count=mean(count)) %&gt;% left_join(gift_pcoa_vectors %&gt;% rownames_to_column(var=&quot;genome&quot;), by=&quot;genome&quot;) %&gt;% left_join(genome_metadata, by=&quot;genome&quot;) %&gt;% ggplot() + scale_color_manual(values=order_colors)+ #genome positions geom_point(aes(x=Axis.1,y=Axis.2, color=order, size=count), alpha=0.8, shape=16) + #scale_color_manual(values=phylum_colors) + scale_size_continuous(range = c(0,10)) + #loading positions #Primary and secondary scale adjustments scale_x_continuous(name = paste0(&quot;PCoA1 (&quot;,round(gift_pcoa_rel_eigen[1]*100, digits = 2), &quot; %)&quot;), sec.axis = sec_axis(~ . / scale, name = &quot;Loadings on PCoA1&quot;) ) + scale_y_continuous(name = paste0(&quot;PCoA2 (&quot;,round(gift_pcoa_rel_eigen[2]*100, digits = 2), &quot; %)&quot;), sec.axis = sec_axis(~ . / scale, name = &quot;Loadings on PCoA2&quot;) ) + facet_grid(treatment ~ day) + theme_linedraw() + theme(legend.position = &quot;none&quot;) genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% filter(!is.na(day)) %&gt;% group_by(genome,treatment,day) %&gt;% summarise(count=mean(count)) %&gt;% left_join(gift_pcoa_vectors %&gt;% rownames_to_column(var=&quot;genome&quot;), by=&quot;genome&quot;) %&gt;% left_join(genome_metadata, by=&quot;genome&quot;) %&gt;% ggplot(aes(x=Axis.1, y=count, group=treatment, color=treatment)) + scale_color_manual(values=treatment_colors)+ geom_smooth(method = lm, formula = y ~ splines::bs(x, 3), se = FALSE) + facet_grid(. ~ day) + theme_minimal() + theme(legend.position = &quot;none&quot;) genome_gifts %&gt;% to.elements(., GIFT_db) %&gt;% to.functions(., GIFT_db) %&gt;% to.community(., genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% column_to_rownames(var=&quot;genome&quot;), GIFT_db) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;sample&quot;) %&gt;% pivot_longer(-sample, names_to = &quot;trait&quot;, values_to = &quot;value&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(trait,treatment,day) %&gt;% summarise(value=mean(value)) %&gt;% mutate(trait=factor(trait)) %&gt;% filter(treatment != &quot;TG0&quot;) %&gt;% ggplot(aes(x=fct_reorder(trait, desc(value)), y=value, fill=trait)) + geom_bar(stat=&quot;identity&quot;, width=1) + facet_grid(treatment ~ day) + theme_minimal() + theme(legend.position = &quot;none&quot;) genome_gifts %&gt;% to.elements(., GIFT_db) %&gt;% to.functions(., GIFT_db) %&gt;% to.community(., genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% column_to_rownames(var=&quot;genome&quot;), GIFT_db) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;sample&quot;) %&gt;% pivot_longer(-sample, names_to = &quot;trait&quot;, values_to = &quot;value&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(sample,treatment,day) %&gt;% summarise(value=mean(value)) %&gt;% filter(treatment != &quot;TG0&quot;) %&gt;% ggplot(aes(x=day, y=value, group=day, fill=treatment, color=treatment)) + geom_boxplot() + geom_jitter() + scale_color_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TG1&quot;,&quot;TG2&quot;,&quot;TG3&quot;,&quot;TG4&quot;,&quot;TG5&quot;), values=c(&quot;#4059AE&quot;, &quot;#6A9AC3&quot;,&quot;#97D8C4&quot;,&quot;#AFD699&quot;,&quot;#F3B942&quot;)) + scale_fill_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TG1&quot;,&quot;TG2&quot;,&quot;TG3&quot;,&quot;TG4&quot;,&quot;TG5&quot;), values=c(&quot;#4059AE50&quot;, &quot;#6A9AC350&quot;,&quot;#97D8C450&quot;,&quot;#AFD69950&quot;,&quot;#F3B94250&quot;)) + facet_grid(treatment ~ .) + theme_linedraw() + theme(legend.position = &quot;none&quot;) 4.4 Alpha diversity load(&quot;data/data.Rdata&quot;) # Calculate Hill numbers richness &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 0) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(richness = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) neutral &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(neutral = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) phylogenetic &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, tree = genome_tree) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(phylogenetic = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) # Aggregate basal GIFT into elements dist &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) %&gt;% traits2dist(., method = &quot;gower&quot;) # Remove genomes with no hits dist_filt &lt;- dist[!rownames(dist) %in% c(&quot;GEXTRA:bin_000002&quot;, &quot;GEXTRA:bin_000006&quot;), !colnames(dist) %in% c(&quot;GEXTRA:bin_000002&quot;, &quot;GEXTRA:bin_000006&quot;)] functional &lt;- genome_counts_filt %&gt;% arrange(match(genome,rownames(dist))) %&gt;% filter(!genome %in% c(&quot;GEXTRA:bin_000002&quot;, &quot;GEXTRA:bin_000006&quot;)) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, dist = dist_filt) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(functional = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) %&gt;% mutate(functional = if_else(is.nan(functional), 1, functional)) # Merge all metrics alpha_div &lt;- richness %&gt;% full_join(neutral, by = join_by(sample == sample)) %&gt;% full_join(phylogenetic, by = join_by(sample == sample)) %&gt;% full_join(functional, by = join_by(sample == sample)) #Richness alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(metric==&quot;richness&quot;) %&gt;% ggplot(aes(y = value, x = day, group=day, color=treatment, fill=treatment)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TG1&quot;,&quot;TG2&quot;,&quot;TG3&quot;,&quot;TG4&quot;,&quot;TG5&quot;), values=c(&quot;#4059AE&quot;, &quot;#6A9AC3&quot;,&quot;#97D8C4&quot;,&quot;#AFD699&quot;,&quot;#F3B942&quot;)) + scale_fill_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TG1&quot;,&quot;TG2&quot;,&quot;TG3&quot;,&quot;TG4&quot;,&quot;TG5&quot;), values=c(&quot;#4059AE50&quot;, &quot;#6A9AC350&quot;,&quot;#97D8C450&quot;,&quot;#AFD69950&quot;,&quot;#F3B94250&quot;)) + facet_grid(treatment ~ ., scales = &quot;fixed&quot;) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) #Neutral alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(metric==&quot;neutral&quot;) %&gt;% ggplot(aes(y = value, x = day, group=day, color=treatment, fill=treatment)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TG1&quot;,&quot;TG2&quot;,&quot;TG3&quot;,&quot;TG4&quot;,&quot;TG5&quot;), values=c(&quot;#4059AE&quot;, &quot;#6A9AC3&quot;,&quot;#97D8C4&quot;,&quot;#AFD699&quot;,&quot;#F3B942&quot;)) + scale_fill_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TG1&quot;,&quot;TG2&quot;,&quot;TG3&quot;,&quot;TG4&quot;,&quot;TG5&quot;), values=c(&quot;#4059AE50&quot;, &quot;#6A9AC350&quot;,&quot;#97D8C450&quot;,&quot;#AFD69950&quot;,&quot;#F3B94250&quot;)) + facet_grid(treatment ~ ., scales = &quot;fixed&quot;) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) + theme_linedraw() + theme(legend.position = &quot;none&quot;) #Phylogenetic alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(metric==&quot;phylogenetic&quot;) %&gt;% ggplot(aes(y = value, x = day, group=day, color=treatment, fill=treatment)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TG1&quot;,&quot;TG2&quot;,&quot;TG3&quot;,&quot;TG4&quot;,&quot;TG5&quot;), values=c(&quot;#4059AE&quot;, &quot;#6A9AC3&quot;,&quot;#97D8C4&quot;,&quot;#AFD699&quot;,&quot;#F3B942&quot;)) + scale_fill_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TG1&quot;,&quot;TG2&quot;,&quot;TG3&quot;,&quot;TG4&quot;,&quot;TG5&quot;), values=c(&quot;#4059AE50&quot;, &quot;#6A9AC350&quot;,&quot;#97D8C450&quot;,&quot;#AFD69950&quot;,&quot;#F3B94250&quot;)) + facet_grid(treatment ~ ., scales = &quot;fixed&quot;) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) #Functional alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(metric==&quot;functional&quot;) %&gt;% ggplot(aes(y = value, x = treatment, group=treatment, color=treatment, fill=treatment)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TG1&quot;,&quot;TG2&quot;,&quot;TG3&quot;,&quot;TG4&quot;,&quot;TG5&quot;), values=c(&quot;#4059AE&quot;, &quot;#6A9AC3&quot;,&quot;#97D8C4&quot;,&quot;#AFD699&quot;,&quot;#F3B942&quot;)) + scale_fill_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TG1&quot;,&quot;TG2&quot;,&quot;TG3&quot;,&quot;TG4&quot;,&quot;TG5&quot;), values=c(&quot;#4059AE50&quot;, &quot;#6A9AC350&quot;,&quot;#97D8C450&quot;,&quot;#AFD69950&quot;,&quot;#F3B94250&quot;)) + facet_wrap(. ~ day, scales = &quot;fixed&quot;, ncol=5) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) #Richness alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(metric==&quot;richness&quot;) %&gt;% ggplot(aes(y = value, x = day, group=treatment, color=treatment, fill=treatment)) + geom_point() + geom_smooth(method=&quot;loess&quot;,se=TRUE)+ scale_color_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TG1&quot;,&quot;TG2&quot;,&quot;TG3&quot;,&quot;TG4&quot;,&quot;TG5&quot;), values=c(&quot;#4059AE&quot;, &quot;#6A9AC3&quot;,&quot;#97D8C4&quot;,&quot;#AFD699&quot;,&quot;#F3B942&quot;)) + scale_fill_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TG1&quot;,&quot;TG2&quot;,&quot;TG3&quot;,&quot;TG4&quot;,&quot;TG5&quot;), values=c(&quot;#4059AE50&quot;, &quot;#6A9AC350&quot;,&quot;#97D8C450&quot;,&quot;#AFD69950&quot;,&quot;#F3B94250&quot;)) + coord_cartesian(xlim = c(7, 35)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(metric==&quot;neutral&quot;) %&gt;% ggplot(aes(y = value, x = day, group=treatment, color=treatment, fill=treatment)) + geom_point() + geom_smooth(method=&quot;loess&quot;,se=TRUE)+ scale_color_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TG1&quot;,&quot;TG2&quot;,&quot;TG3&quot;,&quot;TG4&quot;,&quot;TG5&quot;), values=c(&quot;#4059AE&quot;, &quot;#6A9AC3&quot;,&quot;#97D8C4&quot;,&quot;#AFD699&quot;,&quot;#F3B942&quot;)) + scale_fill_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TG1&quot;,&quot;TG2&quot;,&quot;TG3&quot;,&quot;TG4&quot;,&quot;TG5&quot;), values=c(&quot;#4059AE50&quot;, &quot;#6A9AC350&quot;,&quot;#97D8C450&quot;,&quot;#AFD69950&quot;,&quot;#F3B94250&quot;)) + coord_cartesian(xlim = c(7, 35)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(metric==&quot;phylogenetic&quot;) %&gt;% ggplot(aes(y = value, x = day, group=treatment, color=treatment, fill=treatment)) + geom_point() + geom_smooth(method=&quot;loess&quot;,se=TRUE)+ scale_color_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TG1&quot;,&quot;TG2&quot;,&quot;TG3&quot;,&quot;TG4&quot;,&quot;TG5&quot;), values=c(&quot;#4059AE&quot;, &quot;#6A9AC3&quot;,&quot;#97D8C4&quot;,&quot;#AFD699&quot;,&quot;#F3B942&quot;)) + scale_fill_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TG1&quot;,&quot;TG2&quot;,&quot;TG3&quot;,&quot;TG4&quot;,&quot;TG5&quot;), values=c(&quot;#4059AE50&quot;, &quot;#6A9AC350&quot;,&quot;#97D8C450&quot;,&quot;#AFD69950&quot;,&quot;#F3B94250&quot;)) + coord_cartesian(xlim = c(7, 35)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(metric==&quot;functional&quot;) %&gt;% ggplot(aes(y = value, x = day, group=treatment, color=treatment, fill=treatment)) + geom_point() + geom_smooth(method=&quot;loess&quot;,se=TRUE)+ scale_color_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TG1&quot;,&quot;TG2&quot;,&quot;TG3&quot;,&quot;TG4&quot;,&quot;TG5&quot;), values=c(&quot;#4059AE&quot;, &quot;#6A9AC3&quot;,&quot;#97D8C4&quot;,&quot;#AFD699&quot;,&quot;#F3B942&quot;)) + scale_fill_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TG1&quot;,&quot;TG2&quot;,&quot;TG3&quot;,&quot;TG4&quot;,&quot;TG5&quot;), values=c(&quot;#4059AE50&quot;, &quot;#6A9AC350&quot;,&quot;#97D8C450&quot;,&quot;#AFD69950&quot;,&quot;#F3B94250&quot;)) + coord_cartesian(xlim = c(7, 35)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) 4.5 Alpha diversity vs. MCI alpha &lt;- alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;alpha&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(metric==&quot;richness&quot;) %&gt;% select(sample,alpha) mci &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) %&gt;% to.functions(., GIFT_db) %&gt;% to.community(., genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% column_to_rownames(var=&quot;genome&quot;), GIFT_db) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;sample&quot;) %&gt;% pivot_longer(-sample, names_to = &quot;trait&quot;, values_to = &quot;mci&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(sample,treatment,day) %&gt;% summarise(mci=mean(mci)) %&gt;% filter(treatment != &quot;TG0&quot;) inner_join(alpha,mci,by=&quot;sample&quot;) %&gt;% ggplot(aes(y = alpha, x = mci)) + geom_smooth(method = &quot;glm&quot;, formula = y~x, method.args = list(family = gaussian(link = &#39;log&#39;)), color=&quot;#999999&quot;) + geom_point(aes(color=treatment)) + scale_color_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TG1&quot;,&quot;TG2&quot;,&quot;TG3&quot;,&quot;TG4&quot;,&quot;TG5&quot;), values=c(&quot;#4059AE&quot;, &quot;#6A9AC3&quot;,&quot;#97D8C4&quot;,&quot;#AFD699&quot;,&quot;#F3B942&quot;)) + theme_classic() + theme(legend.position = &quot;none&quot;) "],["beta-diversity.html", "Chapter 5 Beta diversity 5.1 Permanova 5.2 Richness 5.3 Day 7", " Chapter 5 Beta diversity load(&quot;data/data.Rdata&quot;) beta_q0n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 0) beta_q1n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1) beta_q1p &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1, tree = keep.tip(genome_tree,tip=rownames(.))) dist &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) %&gt;% traits2dist(., method=&quot;gower&quot;) beta_q1f &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1, dist = dist[rownames(.), rownames(.)]) save(beta_q0n, beta_q1n, beta_q1p, file=&quot;data/beta_diversity.Rdata&quot;) 5.1 Permanova load(&quot;data/beta_diversity.Rdata&quot;) #Richness betadisper(beta_q0n$C, sample_metadata$treatment[sample_metadata$treatment != &quot;TG0&quot;]) %&gt;% permutest(., pairwise = TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 4 0.11176 0.027939 1.431 999 0.234 Residuals 107 2.08914 0.019525 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) TG1 TG2 TG3 TG4 TG5 TG1 0.489000 0.067000 0.223000 0.627 TG2 0.482966 0.185000 0.454000 0.756 TG3 0.080345 0.175034 0.448000 0.100 TG4 0.209775 0.478109 0.456447 0.316 TG5 0.643690 0.754593 0.110414 0.307687 adonis2(beta_q0n$C ~ treatment * day, data = sample_metadata %&gt;% filter(treatment != &quot;TG0&quot;) %&gt;% arrange(match(sample,labels(beta_q1n$C))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() .table td.tinytable_css_id74ectty181s63zrdw60a, .table th.tinytable_css_id74ectty181s63zrdw60a { border-bottom: solid 0.1em #d3d8dc; } term df SumOfSqs R2 statistic p.value Model 9 7.484587 0.6208242 18.55606 0.001 Residual 102 4.571301 0.3791758 NA NA Total 111 12.055888 1.0000000 NA NA #Neutral diversity betadisper(beta_q1n$C, sample_metadata$treatment[sample_metadata$treatment != &quot;TG0&quot;]) %&gt;% permutest(., pairwise = TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 4 0.03083 0.0077065 0.3238 999 0.865 Residuals 107 2.54696 0.0238034 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) TG1 TG2 TG3 TG4 TG5 TG1 0.88500 0.40900 0.50400 0.775 TG2 0.88020 0.42800 0.57000 0.871 TG3 0.36285 0.42428 0.74700 0.508 TG4 0.50197 0.59266 0.75648 0.694 TG5 0.76469 0.87585 0.52248 0.71357 adonis2(beta_q1n$C ~ treatment * day, data = sample_metadata %&gt;% filter(treatment != &quot;TG0&quot;) %&gt;% arrange(match(sample,labels(beta_q1n$C))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() .table td.tinytable_css_id57y6wg09ubipcsqxhtdw, .table th.tinytable_css_id57y6wg09ubipcsqxhtdw { border-bottom: solid 0.1em #d3d8dc; } term df SumOfSqs R2 statistic p.value Model 9 8.812652 0.6062983 17.45327 0.001 Residual 102 5.722522 0.3937017 NA NA Total 111 14.535174 1.0000000 NA NA #Phylogenetic diversity betadisper(beta_q1p$C, sample_metadata$treatment[sample_metadata$treatment != &quot;TG0&quot;]) %&gt;% permutest(., pairwise = TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 4 0.007294 0.0018234 0.6588 999 0.604 Residuals 107 0.296161 0.0027679 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) TG1 TG2 TG3 TG4 TG5 TG1 0.53300 0.14700 0.19000 0.265 TG2 0.52164 0.33700 0.40600 0.498 TG3 0.15794 0.32125 0.89900 0.891 TG4 0.21331 0.40937 0.90278 0.981 TG5 0.27885 0.48101 0.88912 0.97933 adonis2(beta_q1p$C ~ treatment * day, data = sample_metadata %&gt;% filter(treatment != &quot;TG0&quot;) %&gt;% arrange(match(sample,labels(beta_q1p$C))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() .table td.tinytable_css_idmxiqhqfyyuejhire3p3i, .table th.tinytable_css_idmxiqhqfyyuejhire3p3i { border-bottom: solid 0.1em #d3d8dc; } term df SumOfSqs R2 statistic p.value Model 9 0.5927034 0.5435966 13.4985 0.001 Residual 102 0.4976333 0.4564034 NA NA Total 111 1.0903367 1.0000000 NA NA #Functional diversity betadisper(beta_q1f$C, sample_metadata$treatment[sample_metadata$treatment != &quot;TG0&quot;]) %&gt;% permutest(., pairwise = TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 4 0.001863 0.00046574 0.9798 999 0.443 Residuals 107 0.050863 0.00047536 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) TG1 TG2 TG3 TG4 TG5 TG1 0.65600 0.22600 0.47200 0.368 TG2 0.66449 0.11700 0.21900 0.211 TG3 0.20079 0.11202 0.52200 0.694 TG4 0.43259 0.24866 0.51631 0.816 TG5 0.34760 0.20468 0.69546 0.80418 adonis2(beta_q1f$C ~ treatment * day, data = sample_metadata %&gt;% filter(treatment != &quot;TG0&quot;) %&gt;% arrange(match(sample,labels(beta_q1f$C))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() .table td.tinytable_css_idxu96fsfhm6v3xxwsqh05, .table th.tinytable_css_idxu96fsfhm6v3xxwsqh05 { border-bottom: solid 0.1em #d3d8dc; } term df SumOfSqs R2 statistic p.value Model 9 0.01178871 0.120672 1.555297 0.277 Residual 102 0.08590348 0.879328 NA NA Total 111 0.09769219 1.000000 NA NA 5.2 Richness nmds_richness &lt;- beta_q0n$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(treatment,day) %&gt;% mutate(x_cen = median(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = median(NMDS2, na.rm = TRUE)) %&gt;% ungroup() 5.2.1 All time points nmds_richness %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = treatment, fill = treatment, shape = as.factor(day))) + scale_color_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TG1&quot;,&quot;TG2&quot;,&quot;TG3&quot;,&quot;TG4&quot;,&quot;TG5&quot;), values=c(&quot;#4059AE&quot;, &quot;#6A9AC3&quot;,&quot;#97D8C4&quot;,&quot;#AFD699&quot;,&quot;#F3B942&quot;)) + scale_fill_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TG1&quot;,&quot;TG2&quot;,&quot;TG3&quot;,&quot;TG4&quot;,&quot;TG5&quot;), values=c(&quot;#4059AE50&quot;, &quot;#6A9AC350&quot;,&quot;#97D8C450&quot;,&quot;#AFD69950&quot;,&quot;#F3B94250&quot;)) + scale_shape_manual(name=&quot;Day&quot;, breaks=c(7,14,21,28,35), values=c(21,22,23,24,25)) + geom_point(size = 4) + # stat_ellipse(aes(color = beta_q1n_nmds$Groups))+ geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(shape=&quot;Individual&quot;) nmds_richness %&gt;% select(x_cen,y_cen,treatment,day) %&gt;% unique() %&gt;% arrange(treatment,day) %&gt;% ggplot(aes(x = x_cen, y = y_cen, color = treatment, fill = treatment)) + scale_color_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TG1&quot;,&quot;TG2&quot;,&quot;TG3&quot;,&quot;TG4&quot;,&quot;TG5&quot;), values=c(&quot;#4059AE&quot;, &quot;#6A9AC3&quot;,&quot;#97D8C4&quot;,&quot;#AFD699&quot;,&quot;#F3B942&quot;)) + scale_fill_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TG1&quot;,&quot;TG2&quot;,&quot;TG3&quot;,&quot;TG4&quot;,&quot;TG5&quot;), values=c(&quot;#4059AE50&quot;, &quot;#6A9AC350&quot;,&quot;#97D8C450&quot;,&quot;#AFD69950&quot;,&quot;#F3B94250&quot;)) + geom_point(size = 4) + geom_path(aes(xend=c(tail(x_cen, n=-1), NA), yend=c(tail(y_cen, n=-1), NA), group=treatment), size = 2, alpha=0.5, arrow=arrow(type = &quot;closed&quot;, length=unit(0.5,&quot;cm&quot;)) ) + # stat_ellipse(aes(color = beta_q1n_nmds$Groups))+ #geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(shape=&quot;Individual&quot;) nmds_richness %&gt;% filter(day == 7) %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = treatment, fill = treatment, shape = as.factor(day))) + scale_color_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TG1&quot;,&quot;TG2&quot;,&quot;TG3&quot;,&quot;TG4&quot;,&quot;TG5&quot;), values=c(&quot;#4059AE&quot;, &quot;#6A9AC3&quot;,&quot;#97D8C4&quot;,&quot;#AFD699&quot;,&quot;#F3B942&quot;)) + scale_fill_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TG1&quot;,&quot;TG2&quot;,&quot;TG3&quot;,&quot;TG4&quot;,&quot;TG5&quot;), values=c(&quot;#4059AE50&quot;, &quot;#6A9AC350&quot;,&quot;#97D8C450&quot;,&quot;#AFD69950&quot;,&quot;#F3B94250&quot;)) + scale_shape_manual(name=&quot;Day&quot;, breaks=c(7,14,21,28,35), values=c(21,22,23,24,25)) + geom_point(size = 4) + # stat_ellipse(aes(color = beta_q1n_nmds$Groups))+ geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(shape=&quot;Individual&quot;) ## Neutral diversity nmds_neutral &lt;- beta_q1n$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(treatment,day) %&gt;% mutate(x_cen = median(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = median(NMDS2, na.rm = TRUE)) %&gt;% ungroup() 5.2.2 All time points nmds_neutral %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = treatment, fill = treatment, shape = as.factor(day))) + scale_color_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TG1&quot;,&quot;TG2&quot;,&quot;TG3&quot;,&quot;TG4&quot;,&quot;TG5&quot;), values=c(&quot;#4059AE&quot;, &quot;#6A9AC3&quot;,&quot;#97D8C4&quot;,&quot;#AFD699&quot;,&quot;#F3B942&quot;)) + scale_fill_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TG1&quot;,&quot;TG2&quot;,&quot;TG3&quot;,&quot;TG4&quot;,&quot;TG5&quot;), values=c(&quot;#4059AE50&quot;, &quot;#6A9AC350&quot;,&quot;#97D8C450&quot;,&quot;#AFD69950&quot;,&quot;#F3B94250&quot;)) + scale_shape_manual(name=&quot;Day&quot;, breaks=c(7,14,21,28,35), values=c(21,22,23,24,25)) + geom_point(size = 4) + # stat_ellipse(aes(color = beta_q1n_nmds$Groups))+ geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(shape=&quot;Individual&quot;) 5.2.3 Trajectories nmds_neutral %&gt;% select(x_cen,y_cen,treatment,day) %&gt;% unique() %&gt;% arrange(treatment,day) %&gt;% ggplot(aes(x = x_cen, y = y_cen, color = treatment, fill = treatment)) + scale_color_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TG1&quot;,&quot;TG2&quot;,&quot;TG3&quot;,&quot;TG4&quot;,&quot;TG5&quot;), values=c(&quot;#4059AE&quot;, &quot;#6A9AC3&quot;,&quot;#97D8C4&quot;,&quot;#AFD699&quot;,&quot;#F3B942&quot;)) + scale_fill_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TG1&quot;,&quot;TG2&quot;,&quot;TG3&quot;,&quot;TG4&quot;,&quot;TG5&quot;), values=c(&quot;#4059AE50&quot;, &quot;#6A9AC350&quot;,&quot;#97D8C450&quot;,&quot;#AFD69950&quot;,&quot;#F3B94250&quot;)) + geom_point(size = 4) + geom_path(aes(xend=c(tail(x_cen, n=-1), NA), yend=c(tail(y_cen, n=-1), NA), group=treatment), size = 2, alpha=0.5, arrow=arrow(type = &quot;closed&quot;, length=unit(0.5,&quot;cm&quot;)) ) + # stat_ellipse(aes(color = beta_q1n_nmds$Groups))+ #geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(shape=&quot;Individual&quot;) 5.3 Day 7 nmds_neutral %&gt;% filter(day == 7) %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = treatment, fill = treatment, shape = as.factor(day))) + scale_color_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TG1&quot;,&quot;TG2&quot;,&quot;TG3&quot;,&quot;TG4&quot;,&quot;TG5&quot;), values=c(&quot;#4059AE&quot;, &quot;#6A9AC3&quot;,&quot;#97D8C4&quot;,&quot;#AFD699&quot;,&quot;#F3B942&quot;)) + scale_fill_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TG1&quot;,&quot;TG2&quot;,&quot;TG3&quot;,&quot;TG4&quot;,&quot;TG5&quot;), values=c(&quot;#4059AE50&quot;, &quot;#6A9AC350&quot;,&quot;#97D8C450&quot;,&quot;#AFD69950&quot;,&quot;#F3B94250&quot;)) + scale_shape_manual(name=&quot;Day&quot;, breaks=c(7,14,21,28,35), values=c(21,22,23,24,25)) + geom_point(size = 4) + # stat_ellipse(aes(color = beta_q1n_nmds$Groups))+ geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(shape=&quot;Individual&quot;) "],["network-analysis.html", "Chapter 6 Network analysis 6.1 Timewise analysis 6.2 Treatment-wise analysis 6.3 Combined", " Chapter 6 Network analysis mag_cor &lt;- genome_counts_filt %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% filter(rowSums(select(., where(is.numeric)) != 0) &gt; 3) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% transform(., &#39;clr&#39;) %&gt;% t() %&gt;% cor(.,method=&quot;pearson&quot;) threshold &lt;- 0.7 #Positive correlations mag_cor_pos &lt;- ifelse(mag_cor &gt; threshold, 1, 0) graph_pos &lt;- graph_from_adjacency_matrix(mag_cor_pos, mode = &quot;undirected&quot;, diag = FALSE) #Node color V(graph_pos)$color &lt;- tibble(order=genome_metadata$order %&gt;% unique() %&gt;% sort(), color=order_colors) %&gt;% right_join(genome_metadata,by=&quot;order&quot;)%&gt;% filter(genome %in% V(graph_pos)$name) %&gt;% select(genome,color) %&gt;% pull(color) #Node size V(graph_pos)$size &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% rowwise() %&gt;% mutate(average = mean(c_across(where(is.numeric)), na.rm = TRUE)) %&gt;% ungroup() %&gt;% select(genome,average) %&gt;% filter(genome %in% V(graph_pos)$name) %&gt;% arrange(match(genome,V(graph_pos)$name)) %&gt;% mutate(size = scales::rescale(average, to = c(2, 10))) %&gt;% pull(size) cluster_pos &lt;- cluster_edge_betweenness(graph_pos) communities_pos &lt;- split(V(graph_pos)$name, membership(cluster_pos) )%&gt;% keep(~ length(.x) &gt; 1) #Negative correlations mag_cor_neg &lt;- ifelse(mag_cor &lt; -threshold, 1, 0) graph_neg &lt;- graph_from_adjacency_matrix(mag_cor_neg, mode = &quot;undirected&quot;, diag = FALSE) #Node color V(graph_neg)$color &lt;- tibble(order=genome_metadata$order %&gt;% unique() %&gt;% sort(), color=order_colors) %&gt;% right_join(genome_metadata,by=&quot;order&quot;)%&gt;% filter(genome %in% V(graph_neg)$name) %&gt;% select(genome,color) %&gt;% pull(color) #Node size V(graph_neg)$size &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% rowwise() %&gt;% mutate(average = mean(c_across(where(is.numeric)), na.rm = TRUE)) %&gt;% ungroup() %&gt;% select(genome,average) %&gt;% filter(genome %in% V(graph_neg)$name) %&gt;% arrange(match(genome,V(graph_neg)$name)) %&gt;% mutate(size = scales::rescale(average, to = c(2, 10))) %&gt;% pull(size) cluster_neg &lt;- cluster_edge_betweenness(graph_neg) communities_neg &lt;- split(V(graph_neg)$name, membership(cluster_neg) )%&gt;% keep(~ length(.x) &gt; 1) corrplot(mag_cor, method = &#39;color&#39;, order = &#39;AOE&#39;) plot( graph_pos, vertex.color = V(graph_pos)$color, vertex.size = V(graph_pos)$size, vertex.label = NA, vertex.frame.color = NA, edge.width = 1, mark.groups = communities(cluster_pos) %&gt;% keep(~ length(.x) &gt;= 2), mark.col = &quot;#f4f4f4&quot;, mark.border = NA, layout = layout_with_fr ) plot( graph_neg, vertex.color = V(graph_neg)$color, vertex.size = V(graph_neg)$size, vertex.label = NA, vertex.frame.color = NA, edge.width = 1, mark.groups = communities(cluster_neg) %&gt;% keep(~ length(.x) &gt;= 2), mark.col = &quot;#f4f4f4&quot;, mark.border = NA, layout = layout_with_fr ) 6.1 Timewise analysis 6.1.1 Day 7 sorted_genomes &lt;- genome_tree$tip.label sample_subset &lt;- sample_metadata %&gt;% filter(day==7) %&gt;% pull(sample) mag_cor &lt;- genome_counts_filt[,c(&quot;genome&quot;,sample_subset)] %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% filter(rowSums(select(., where(is.numeric)) != 0) &gt; 3) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% transform(., &#39;clr&#39;) %&gt;% t() %&gt;% cor(.,method=&quot;pearson&quot;) threshold &lt;- 0.7 #Positive correlations mag_cor_pos &lt;- ifelse(mag_cor &gt; threshold, 1, 0) graph_pos &lt;- graph_from_adjacency_matrix(mag_cor_pos, mode = &quot;undirected&quot;, diag = FALSE) #Node color V(graph_pos)$color &lt;- tibble(order=genome_metadata$order %&gt;% unique() %&gt;% sort(), color=order_colors) %&gt;% right_join(genome_metadata,by=&quot;order&quot;)%&gt;% filter(genome %in% V(graph_pos)$name) %&gt;% select(genome,color) %&gt;% pull(color) #Node size V(graph_pos)$size &lt;- genome_counts_filt[,c(&quot;genome&quot;,sample_subset)] %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% filter(rowSums(select(., where(is.numeric)) != 0) &gt; 3) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% transform(., &#39;clr&#39;) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;genome&quot;) %&gt;% rowwise() %&gt;% mutate(average = mean(c_across(where(is.numeric)), na.rm = TRUE)) %&gt;% ungroup() %&gt;% select(genome,average) %&gt;% filter(genome %in% V(graph_pos)$name) %&gt;% arrange(match(genome,V(graph_pos)$name)) %&gt;% mutate(size = scales::rescale(average, to = c(2, 10))) %&gt;% pull(size) cluster_pos &lt;- cluster_edge_betweenness(graph_pos) communities_pos_7 &lt;- split(V(graph_pos)$name, membership(cluster_pos) )%&gt;% keep(~ length(.x) &gt; 1) #Negative correlations mag_cor_neg &lt;- ifelse(mag_cor &lt; -threshold, 1, 0) graph_neg &lt;- graph_from_adjacency_matrix(mag_cor_neg, mode = &quot;undirected&quot;, diag = FALSE) #Node color V(graph_neg)$color &lt;- tibble(order=genome_metadata$order %&gt;% unique() %&gt;% sort(), color=order_colors) %&gt;% right_join(genome_metadata,by=&quot;order&quot;)%&gt;% filter(genome %in% V(graph_neg)$name) %&gt;% select(genome,color) %&gt;% pull(color) #Node size V(graph_neg)$size &lt;- genome_counts_filt[,c(&quot;genome&quot;,sample_subset)] %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% filter(rowSums(select(., where(is.numeric)) != 0) &gt; 3) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% transform(., &#39;clr&#39;) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;genome&quot;) %&gt;% rowwise() %&gt;% mutate(average = mean(c_across(where(is.numeric)), na.rm = TRUE)) %&gt;% ungroup() %&gt;% select(genome,average) %&gt;% filter(genome %in% V(graph_neg)$name) %&gt;% arrange(match(genome,V(graph_neg)$name)) %&gt;% mutate(size = scales::rescale(average, to = c(2, 10))) %&gt;% pull(size) cluster_neg &lt;- cluster_edge_betweenness(graph_neg) communities_neg_7 &lt;- split(V(graph_neg)$name, membership(cluster_neg) )%&gt;% keep(~ length(.x) &gt; 1) #Network properties network_positive_d7 &lt;- tibble(day=&quot;day7&quot;, density=graph.density(graph_pos), modularity=modularity(cluster_walktrap(graph_pos)), assortability=assortativity_degree(graph_pos), connectivity=mean(components(graph_pos)$csize), centrality=eigen_centrality(graph_pos)$value) network_negative_d7 &lt;- tibble(day=&quot;day7&quot;, density=graph.density(graph_neg), modularity=modularity(cluster_walktrap(graph_neg)), assortability=assortativity_degree(graph_neg), connectivity=mean(components(graph_neg)$csize), centrality=eigen_centrality(graph_neg)$value) corrplot(mag_cor, method = &#39;color&#39;, order = &#39;AOE&#39;) plot( graph_pos, vertex.color = V(graph_pos)$color, vertex.size = V(graph_pos)$size, vertex.label = NA, vertex.frame.color = NA, edge.width = 1, mark.groups = communities(cluster_pos) %&gt;% keep(~ length(.x) &gt;= 2), mark.col = &quot;#f4f4f4&quot;, mark.border = NA, layout = layout_with_fr ) plot( graph_neg, vertex.color = V(graph_neg)$color, vertex.size = V(graph_neg)$size, vertex.label = NA, vertex.frame.color = NA, edge.width = 1, mark.groups = communities(cluster_neg) %&gt;% keep(~ length(.x) &gt;= 2), mark.col = &quot;#f4f4f4&quot;, mark.border = NA, layout = layout_with_fr ) 6.1.2 Day 14 sorted_genomes &lt;- genome_tree$tip.label sample_subset &lt;- sample_metadata %&gt;% filter(day==14) %&gt;% pull(sample) mag_cor &lt;- genome_counts_filt[,c(&quot;genome&quot;,sample_subset)] %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% filter(rowSums(select(., where(is.numeric)) != 0) &gt; 3) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% transform(., &#39;clr&#39;) %&gt;% t() %&gt;% cor(.,method=&quot;pearson&quot;) threshold &lt;- 0.7 #Positive correlations mag_cor_pos &lt;- ifelse(mag_cor &gt; threshold, 1, 0) graph_pos &lt;- graph_from_adjacency_matrix(mag_cor_pos, mode = &quot;undirected&quot;, diag = FALSE) #Node color V(graph_pos)$color &lt;- tibble(order=genome_metadata$order %&gt;% unique() %&gt;% sort(), color=order_colors) %&gt;% right_join(genome_metadata,by=&quot;order&quot;)%&gt;% filter(genome %in% V(graph_pos)$name) %&gt;% select(genome,color) %&gt;% pull(color) #Node size V(graph_pos)$size &lt;- genome_counts_filt[,c(&quot;genome&quot;,sample_subset)] %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% filter(rowSums(select(., where(is.numeric)) != 0) &gt; 3) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% transform(., &#39;clr&#39;) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;genome&quot;) %&gt;% rowwise() %&gt;% mutate(average = mean(c_across(where(is.numeric)), na.rm = TRUE)) %&gt;% ungroup() %&gt;% select(genome,average) %&gt;% filter(genome %in% V(graph_pos)$name) %&gt;% arrange(match(genome,V(graph_pos)$name)) %&gt;% mutate(size = scales::rescale(average, to = c(2, 10))) %&gt;% pull(size) cluster_pos &lt;- cluster_edge_betweenness(graph_pos) communities_pos_14 &lt;- split(V(graph_pos)$name, membership(cluster_pos) )%&gt;% keep(~ length(.x) &gt; 1) #Negative correlations mag_cor_neg &lt;- ifelse(mag_cor &lt; -threshold, 1, 0) graph_neg &lt;- graph_from_adjacency_matrix(mag_cor_neg, mode = &quot;undirected&quot;, diag = FALSE) #Node color V(graph_neg)$color &lt;- tibble(order=genome_metadata$order %&gt;% unique() %&gt;% sort(), color=order_colors) %&gt;% right_join(genome_metadata,by=&quot;order&quot;)%&gt;% filter(genome %in% V(graph_neg)$name) %&gt;% select(genome,color) %&gt;% pull(color) #Node size V(graph_neg)$size &lt;- genome_counts_filt[,c(&quot;genome&quot;,sample_subset)] %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% filter(rowSums(select(., where(is.numeric)) != 0) &gt; 3) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% transform(., &#39;clr&#39;) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;genome&quot;) %&gt;% rowwise() %&gt;% mutate(average = mean(c_across(where(is.numeric)), na.rm = TRUE)) %&gt;% ungroup() %&gt;% select(genome,average) %&gt;% filter(genome %in% V(graph_neg)$name) %&gt;% arrange(match(genome,V(graph_neg)$name)) %&gt;% mutate(size = scales::rescale(average, to = c(2, 10))) %&gt;% pull(size) cluster_neg &lt;- cluster_edge_betweenness(graph_neg) communities_neg_14 &lt;- split(V(graph_neg)$name, membership(cluster_neg) )%&gt;% keep(~ length(.x) &gt; 1) #Network properties network_positive_d14 &lt;- tibble(day=&quot;day14&quot;, density=graph.density(graph_pos), modularity=modularity(cluster_walktrap(graph_pos)), assortability=assortativity_degree(graph_pos), connectivity=mean(components(graph_pos)$csize), centrality=eigen_centrality(graph_pos)$value) network_negative_d14 &lt;- tibble(day=&quot;day14&quot;, density=graph.density(graph_neg), modularity=modularity(cluster_walktrap(graph_neg)), assortability=assortativity_degree(graph_neg), connectivity=mean(components(graph_neg)$csize), centrality=eigen_centrality(graph_neg)$value) corrplot(mag_cor, method = &#39;color&#39;, order = &#39;AOE&#39;) plot( graph_pos, vertex.color = V(graph_pos)$color, vertex.size = V(graph_pos)$size, vertex.label = NA, vertex.frame.color = NA, edge.width = 1, mark.groups = communities(cluster_pos) %&gt;% keep(~ length(.x) &gt;= 2), mark.col = &quot;#f4f4f4&quot;, mark.border = NA, layout = layout_with_fr ) plot( graph_neg, vertex.color = V(graph_neg)$color, vertex.size = V(graph_neg)$size, vertex.label = NA, vertex.frame.color = NA, edge.width = 1, mark.groups = communities(cluster_neg) %&gt;% keep(~ length(.x) &gt;= 2), mark.col = &quot;#f4f4f4&quot;, mark.border = NA, layout = layout_with_fr ) 6.1.3 Day 21 sorted_genomes &lt;- genome_tree$tip.label sample_subset &lt;- sample_metadata %&gt;% filter(day==21) %&gt;% pull(sample) mag_cor &lt;- genome_counts_filt[,c(&quot;genome&quot;,sample_subset)] %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% filter(rowSums(select(., where(is.numeric)) != 0) &gt; 3) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% transform(., &#39;clr&#39;) %&gt;% t() %&gt;% cor(.,method=&quot;pearson&quot;) threshold &lt;- 0.7 #Positive correlations mag_cor_pos &lt;- ifelse(mag_cor &gt; threshold, 1, 0) graph_pos &lt;- graph_from_adjacency_matrix(mag_cor_pos, mode = &quot;undirected&quot;, diag = FALSE) #Node color V(graph_pos)$color &lt;- tibble(order=genome_metadata$order %&gt;% unique() %&gt;% sort(), color=order_colors) %&gt;% right_join(genome_metadata,by=&quot;order&quot;)%&gt;% filter(genome %in% V(graph_pos)$name) %&gt;% select(genome,color) %&gt;% pull(color) #Node size V(graph_pos)$size &lt;- genome_counts_filt[,c(&quot;genome&quot;,sample_subset)] %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% filter(rowSums(select(., where(is.numeric)) != 0) &gt; 3) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% transform(., &#39;clr&#39;) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;genome&quot;) %&gt;% rowwise() %&gt;% mutate(average = mean(c_across(where(is.numeric)), na.rm = TRUE)) %&gt;% ungroup() %&gt;% select(genome,average) %&gt;% filter(genome %in% V(graph_pos)$name) %&gt;% arrange(match(genome,V(graph_pos)$name)) %&gt;% mutate(size = scales::rescale(average, to = c(2, 10))) %&gt;% pull(size) cluster_pos &lt;- cluster_edge_betweenness(graph_pos) communities_pos_21 &lt;- split(V(graph_pos)$name, membership(cluster_pos) )%&gt;% keep(~ length(.x) &gt; 1) #Negative correlations mag_cor_neg &lt;- ifelse(mag_cor &lt; -threshold, 1, 0) graph_neg &lt;- graph_from_adjacency_matrix(mag_cor_neg, mode = &quot;undirected&quot;, diag = FALSE) #Node color V(graph_neg)$color &lt;- tibble(order=genome_metadata$order %&gt;% unique() %&gt;% sort(), color=order_colors) %&gt;% right_join(genome_metadata,by=&quot;order&quot;)%&gt;% filter(genome %in% V(graph_neg)$name) %&gt;% select(genome,color) %&gt;% pull(color) #Node size V(graph_neg)$size &lt;- genome_counts_filt[,c(&quot;genome&quot;,sample_subset)] %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% filter(rowSums(select(., where(is.numeric)) != 0) &gt; 3) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% transform(., &#39;clr&#39;) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;genome&quot;) %&gt;% rowwise() %&gt;% mutate(average = mean(c_across(where(is.numeric)), na.rm = TRUE)) %&gt;% ungroup() %&gt;% select(genome,average) %&gt;% filter(genome %in% V(graph_neg)$name) %&gt;% arrange(match(genome,V(graph_neg)$name)) %&gt;% mutate(size = scales::rescale(average, to = c(2, 10))) %&gt;% pull(size) cluster_neg &lt;- cluster_edge_betweenness(graph_neg) communities_neg_21 &lt;- split(V(graph_neg)$name, membership(cluster_neg) )%&gt;% keep(~ length(.x) &gt; 1) #Network properties network_positive_d21 &lt;- tibble(day=&quot;day21&quot;, density=graph.density(graph_pos), modularity=modularity(cluster_walktrap(graph_pos)), assortability=assortativity_degree(graph_pos), connectivity=mean(components(graph_pos)$csize), centrality=eigen_centrality(graph_pos)$value) network_negative_d21 &lt;- tibble(day=&quot;day21&quot;, density=graph.density(graph_neg), modularity=modularity(cluster_walktrap(graph_neg)), assortability=assortativity_degree(graph_neg), connectivity=mean(components(graph_neg)$csize), centrality=eigen_centrality(graph_neg)$value) corrplot(mag_cor, method = &#39;color&#39;, order = &#39;AOE&#39;) plot( graph_pos, vertex.color = V(graph_pos)$color, vertex.size = V(graph_pos)$size, vertex.label = NA, vertex.frame.color = NA, edge.width = 1, mark.groups = communities(cluster_pos) %&gt;% keep(~ length(.x) &gt;= 2), mark.col = &quot;#f4f4f4&quot;, mark.border = NA, layout = layout_with_fr ) plot( graph_neg, vertex.color = V(graph_neg)$color, vertex.size = V(graph_neg)$size, vertex.label = NA, vertex.frame.color = NA, edge.width = 1, mark.groups = communities(cluster_neg) %&gt;% keep(~ length(.x) &gt;= 2), mark.col = &quot;#f4f4f4&quot;, mark.border = NA, layout = layout_with_fr ) 6.1.4 Day 28 sorted_genomes &lt;- genome_tree$tip.label sample_subset &lt;- sample_metadata %&gt;% filter(day==28) %&gt;% pull(sample) mag_cor &lt;- genome_counts_filt[,c(&quot;genome&quot;,sample_subset)] %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% filter(rowSums(select(., where(is.numeric)) != 0) &gt; 3) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% transform(., &#39;clr&#39;) %&gt;% t() %&gt;% cor(.,method=&quot;pearson&quot;) threshold &lt;- 0.7 #Positive correlations mag_cor_pos &lt;- ifelse(mag_cor &gt; threshold, 1, 0) graph_pos &lt;- graph_from_adjacency_matrix(mag_cor_pos, mode = &quot;undirected&quot;, diag = FALSE) #Node color V(graph_pos)$color &lt;- tibble(order=genome_metadata$order %&gt;% unique() %&gt;% sort(), color=order_colors) %&gt;% right_join(genome_metadata,by=&quot;order&quot;)%&gt;% filter(genome %in% V(graph_pos)$name) %&gt;% select(genome,color) %&gt;% pull(color) #Node size V(graph_pos)$size &lt;- genome_counts_filt[,c(&quot;genome&quot;,sample_subset)] %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% filter(rowSums(select(., where(is.numeric)) != 0) &gt; 3) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% transform(., &#39;clr&#39;) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;genome&quot;) %&gt;% rowwise() %&gt;% mutate(average = mean(c_across(where(is.numeric)), na.rm = TRUE)) %&gt;% ungroup() %&gt;% select(genome,average) %&gt;% filter(genome %in% V(graph_pos)$name) %&gt;% arrange(match(genome,V(graph_pos)$name)) %&gt;% mutate(size = scales::rescale(average, to = c(2, 10))) %&gt;% pull(size) cluster_pos &lt;- cluster_edge_betweenness(graph_pos) communities_pos_28 &lt;- split(V(graph_pos)$name, membership(cluster_pos) )%&gt;% keep(~ length(.x) &gt; 1) #Negative correlations mag_cor_neg &lt;- ifelse(mag_cor &lt; -threshold, 1, 0) graph_neg &lt;- graph_from_adjacency_matrix(mag_cor_neg, mode = &quot;undirected&quot;, diag = FALSE) #Node color V(graph_neg)$color &lt;- tibble(order=genome_metadata$order %&gt;% unique() %&gt;% sort(), color=order_colors) %&gt;% right_join(genome_metadata,by=&quot;order&quot;)%&gt;% filter(genome %in% V(graph_neg)$name) %&gt;% select(genome,color) %&gt;% pull(color) #Node size V(graph_neg)$size &lt;- genome_counts_filt[,c(&quot;genome&quot;,sample_subset)] %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% filter(rowSums(select(., where(is.numeric)) != 0) &gt; 3) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% transform(., &#39;clr&#39;) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;genome&quot;) %&gt;% rowwise() %&gt;% mutate(average = mean(c_across(where(is.numeric)), na.rm = TRUE)) %&gt;% ungroup() %&gt;% select(genome,average) %&gt;% filter(genome %in% V(graph_neg)$name) %&gt;% arrange(match(genome,V(graph_neg)$name)) %&gt;% mutate(size = scales::rescale(average, to = c(2, 10))) %&gt;% pull(size) cluster_neg &lt;- cluster_edge_betweenness(graph_neg) communities_neg_28 &lt;- split(V(graph_neg)$name, membership(cluster_neg) )%&gt;% keep(~ length(.x) &gt; 1) #Network properties network_positive_d28 &lt;- tibble(day=&quot;day28&quot;, density=graph.density(graph_pos), modularity=modularity(cluster_walktrap(graph_pos)), assortability=assortativity_degree(graph_pos), connectivity=mean(components(graph_pos)$csize), centrality=eigen_centrality(graph_pos)$value) network_negative_d28 &lt;- tibble(day=&quot;day28&quot;, density=graph.density(graph_neg), modularity=modularity(cluster_walktrap(graph_neg)), assortability=assortativity_degree(graph_neg), connectivity=mean(components(graph_neg)$csize), centrality=eigen_centrality(graph_neg)$value) corrplot(mag_cor, method = &#39;color&#39;, order = &#39;AOE&#39;) plot( graph_pos, vertex.color = V(graph_pos)$color, vertex.size = V(graph_pos)$size, vertex.label = NA, vertex.frame.color = NA, edge.width = 1, mark.groups = communities(cluster_pos) %&gt;% keep(~ length(.x) &gt;= 2), mark.col = &quot;#f4f4f4&quot;, mark.border = NA, layout = layout_with_fr ) plot( graph_neg, vertex.color = V(graph_neg)$color, vertex.size = V(graph_neg)$size, vertex.label = NA, vertex.frame.color = NA, edge.width = 1, mark.groups = communities(cluster_neg) %&gt;% keep(~ length(.x) &gt;= 2), mark.col = &quot;#f4f4f4&quot;, mark.border = NA, layout = layout_with_fr ) 6.1.5 Day 35 sorted_genomes &lt;- genome_tree$tip.label sample_subset &lt;- sample_metadata %&gt;% filter(day==35) %&gt;% pull(sample) mag_cor &lt;- genome_counts_filt[,c(&quot;genome&quot;,sample_subset)] %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% filter(rowSums(select(., where(is.numeric)) != 0) &gt; 3) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% transform(., &#39;clr&#39;) %&gt;% t() %&gt;% cor(.,method=&quot;pearson&quot;) threshold &lt;- 0.7 #Positive correlations mag_cor_pos &lt;- ifelse(mag_cor &gt; threshold, 1, 0) graph_pos &lt;- graph_from_adjacency_matrix(mag_cor_pos, mode = &quot;undirected&quot;, diag = FALSE) #Node color V(graph_pos)$color &lt;- tibble(order=genome_metadata$order %&gt;% unique() %&gt;% sort(), color=order_colors) %&gt;% right_join(genome_metadata,by=&quot;order&quot;)%&gt;% filter(genome %in% V(graph_pos)$name) %&gt;% select(genome,color) %&gt;% pull(color) #Node size V(graph_pos)$size &lt;- genome_counts_filt[,c(&quot;genome&quot;,sample_subset)] %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% filter(rowSums(select(., where(is.numeric)) != 0) &gt; 3) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% transform(., &#39;clr&#39;) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;genome&quot;) %&gt;% rowwise() %&gt;% mutate(average = mean(c_across(where(is.numeric)), na.rm = TRUE)) %&gt;% ungroup() %&gt;% select(genome,average) %&gt;% filter(genome %in% V(graph_pos)$name) %&gt;% arrange(match(genome,V(graph_pos)$name)) %&gt;% mutate(size = scales::rescale(average, to = c(2, 10))) %&gt;% pull(size) cluster_pos &lt;- cluster_edge_betweenness(graph_pos) communities_pos_35 &lt;- split(V(graph_pos)$name, membership(cluster_pos) )%&gt;% keep(~ length(.x) &gt; 1) #Negative correlations mag_cor_neg &lt;- ifelse(mag_cor &lt; -threshold, 1, 0) graph_neg &lt;- graph_from_adjacency_matrix(mag_cor_neg, mode = &quot;undirected&quot;, diag = FALSE) #Node color V(graph_neg)$color &lt;- tibble(order=genome_metadata$order %&gt;% unique() %&gt;% sort(), color=order_colors) %&gt;% right_join(genome_metadata,by=&quot;order&quot;)%&gt;% filter(genome %in% V(graph_neg)$name) %&gt;% select(genome,color) %&gt;% pull(color) #Node size V(graph_neg)$size &lt;- genome_counts_filt[,c(&quot;genome&quot;,sample_subset)] %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% filter(rowSums(select(., where(is.numeric)) != 0) &gt; 3) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% transform(., &#39;clr&#39;) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;genome&quot;) %&gt;% rowwise() %&gt;% mutate(average = mean(c_across(where(is.numeric)), na.rm = TRUE)) %&gt;% ungroup() %&gt;% select(genome,average) %&gt;% filter(genome %in% V(graph_neg)$name) %&gt;% arrange(match(genome,V(graph_neg)$name)) %&gt;% mutate(size = scales::rescale(average, to = c(2, 10))) %&gt;% pull(size) cluster_neg &lt;- cluster_edge_betweenness(graph_neg) communities_neg_35 &lt;- split(V(graph_neg)$name, membership(cluster_neg) )%&gt;% keep(~ length(.x) &gt; 1) #Network properties network_positive_d35 &lt;- tibble(day=&quot;day35&quot;, density=graph.density(graph_pos), modularity=modularity(cluster_walktrap(graph_pos)), assortability=assortativity_degree(graph_pos), connectivity=mean(components(graph_pos)$csize), centrality=eigen_centrality(graph_pos)$value) network_negative_d35 &lt;- tibble(day=&quot;day35&quot;, density=graph.density(graph_neg), modularity=modularity(cluster_walktrap(graph_neg)), assortability=assortativity_degree(graph_neg), connectivity=mean(components(graph_neg)$csize), centrality=eigen_centrality(graph_neg)$value) corrplot(mag_cor, method = &#39;color&#39;, order = &#39;AOE&#39;) plot( graph_pos, vertex.color = V(graph_pos)$color, vertex.size = V(graph_pos)$size, vertex.label = NA, vertex.frame.color = NA, edge.width = 1, mark.groups = communities(cluster_pos) %&gt;% keep(~ length(.x) &gt;= 2), mark.col = &quot;#f4f4f4&quot;, mark.border = NA, layout = layout_with_fr ) plot( graph_neg, vertex.color = V(graph_neg)$color, vertex.size = V(graph_neg)$size, vertex.label = NA, vertex.frame.color = NA, edge.width = 1, mark.groups = communities(cluster_neg) %&gt;% keep(~ length(.x) &gt;= 2), mark.col = &quot;#f4f4f4&quot;, mark.border = NA, layout = layout_with_fr ) 6.2 Treatment-wise analysis 6.2.1 TG1 sorted_genomes &lt;- genome_tree$tip.label sample_subset &lt;- sample_metadata %&gt;% filter(treatment==&quot;TG1&quot;) %&gt;% pull(sample) mag_cor &lt;- genome_counts_filt[,c(&quot;genome&quot;,sample_subset)] %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% filter(rowSums(select(., where(is.numeric)) != 0) &gt; 3) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% transform(., &#39;clr&#39;) %&gt;% t() %&gt;% cor(.,method=&quot;pearson&quot;) threshold &lt;- 0.7 #Positive correlations mag_cor_pos &lt;- ifelse(mag_cor &gt; threshold, 1, 0) graph_pos &lt;- graph_from_adjacency_matrix(mag_cor_pos, mode = &quot;undirected&quot;, diag = FALSE) #Node color V(graph_pos)$color &lt;- tibble(order=genome_metadata$order %&gt;% unique() %&gt;% sort(), color=order_colors) %&gt;% right_join(genome_metadata,by=&quot;order&quot;)%&gt;% filter(genome %in% V(graph_pos)$name) %&gt;% select(genome,color) %&gt;% pull(color) #Node size V(graph_pos)$size &lt;- genome_counts_filt[,c(&quot;genome&quot;,sample_subset)] %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% filter(rowSums(select(., where(is.numeric)) != 0) &gt; 3) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% transform(., &#39;clr&#39;) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;genome&quot;) %&gt;% rowwise() %&gt;% mutate(average = mean(c_across(where(is.numeric)), na.rm = TRUE)) %&gt;% ungroup() %&gt;% select(genome,average) %&gt;% filter(genome %in% V(graph_pos)$name) %&gt;% arrange(match(genome,V(graph_pos)$name)) %&gt;% mutate(size = scales::rescale(average, to = c(2, 10))) %&gt;% pull(size) cluster_pos &lt;- cluster_edge_betweenness(graph_pos) communities_pos_TG1 &lt;- split(V(graph_pos)$name, membership(cluster_pos) )%&gt;% keep(~ length(.x) &gt; 1) #Negative correlations mag_cor_neg &lt;- ifelse(mag_cor &lt; -threshold, 1, 0) graph_neg &lt;- graph_from_adjacency_matrix(mag_cor_neg, mode = &quot;undirected&quot;, diag = FALSE) #Node color V(graph_neg)$color &lt;- tibble(order=genome_metadata$order %&gt;% unique() %&gt;% sort(), color=order_colors) %&gt;% right_join(genome_metadata,by=&quot;order&quot;)%&gt;% filter(genome %in% V(graph_neg)$name) %&gt;% select(genome,color) %&gt;% pull(color) #Node size V(graph_neg)$size &lt;- genome_counts_filt[,c(&quot;genome&quot;,sample_subset)] %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% filter(rowSums(select(., where(is.numeric)) != 0) &gt; 3) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% transform(., &#39;clr&#39;) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;genome&quot;) %&gt;% rowwise() %&gt;% mutate(average = mean(c_across(where(is.numeric)), na.rm = TRUE)) %&gt;% ungroup() %&gt;% select(genome,average) %&gt;% filter(genome %in% V(graph_neg)$name) %&gt;% arrange(match(genome,V(graph_neg)$name)) %&gt;% mutate(size = scales::rescale(average, to = c(2, 10))) %&gt;% pull(size) cluster_neg &lt;- cluster_edge_betweenness(graph_neg) communities_neg_TG1 &lt;- split(V(graph_neg)$name, membership(cluster_neg) )%&gt;% keep(~ length(.x) &gt; 1) #Network properties network_positive_TG1 &lt;- tibble(treatment=&quot;TG1&quot;, density=graph.density(graph_pos), modularity=modularity(cluster_walktrap(graph_pos)), assortability=assortativity_degree(graph_pos), connectivity=mean(components(graph_pos)$csize), centrality=eigen_centrality(graph_pos)$value) network_negative_TG1 &lt;- tibble(treatment=&quot;TG1&quot;, density=graph.density(graph_neg), modularity=modularity(cluster_walktrap(graph_neg)), assortability=assortativity_degree(graph_neg), connectivity=mean(components(graph_neg)$csize), centrality=eigen_centrality(graph_neg)$value) corrplot(mag_cor, method = &#39;color&#39;, order = &#39;AOE&#39;) plot( graph_pos, vertex.color = V(graph_pos)$color, vertex.size = V(graph_pos)$size, vertex.label = NA, vertex.frame.color = NA, edge.width = 1, mark.groups = communities(cluster_pos) %&gt;% keep(~ length(.x) &gt;= 2), mark.col = &quot;#f4f4f4&quot;, mark.border = NA, layout = layout_with_fr ) plot( graph_neg, vertex.color = V(graph_neg)$color, vertex.size = V(graph_neg)$size, vertex.label = NA, vertex.frame.color = NA, edge.width = 1, mark.groups = communities(cluster_neg) %&gt;% keep(~ length(.x) &gt;= 2), mark.col = &quot;#f4f4f4&quot;, mark.border = NA, layout = layout_with_fr ) 6.2.2 TG2 sorted_genomes &lt;- genome_tree$tip.label sample_subset &lt;- sample_metadata %&gt;% filter(treatment==&quot;TG2&quot;) %&gt;% pull(sample) mag_cor &lt;- genome_counts_filt[,c(&quot;genome&quot;,sample_subset)] %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% filter(rowSums(select(., where(is.numeric)) != 0) &gt; 3) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% transform(., &#39;clr&#39;) %&gt;% t() %&gt;% cor(.,method=&quot;pearson&quot;) threshold &lt;- 0.7 #Positive correlations mag_cor_pos &lt;- ifelse(mag_cor &gt; threshold, 1, 0) graph_pos &lt;- graph_from_adjacency_matrix(mag_cor_pos, mode = &quot;undirected&quot;, diag = FALSE) #Node color V(graph_pos)$color &lt;- tibble(order=genome_metadata$order %&gt;% unique() %&gt;% sort(), color=order_colors) %&gt;% right_join(genome_metadata,by=&quot;order&quot;)%&gt;% filter(genome %in% V(graph_pos)$name) %&gt;% select(genome,color) %&gt;% pull(color) #Node size V(graph_pos)$size &lt;- genome_counts_filt[,c(&quot;genome&quot;,sample_subset)] %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% filter(rowSums(select(., where(is.numeric)) != 0) &gt; 3) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% transform(., &#39;clr&#39;) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;genome&quot;) %&gt;% rowwise() %&gt;% mutate(average = mean(c_across(where(is.numeric)), na.rm = TRUE)) %&gt;% ungroup() %&gt;% select(genome,average) %&gt;% filter(genome %in% V(graph_pos)$name) %&gt;% arrange(match(genome,V(graph_pos)$name)) %&gt;% mutate(size = scales::rescale(average, to = c(2, 10))) %&gt;% pull(size) cluster_pos &lt;- cluster_edge_betweenness(graph_pos) communities_pos_TG2 &lt;- split(V(graph_pos)$name, membership(cluster_pos) )%&gt;% keep(~ length(.x) &gt; 1) #Negative correlations mag_cor_neg &lt;- ifelse(mag_cor &lt; -threshold, 1, 0) graph_neg &lt;- graph_from_adjacency_matrix(mag_cor_neg, mode = &quot;undirected&quot;, diag = FALSE) #Node color V(graph_neg)$color &lt;- tibble(order=genome_metadata$order %&gt;% unique() %&gt;% sort(), color=order_colors) %&gt;% right_join(genome_metadata,by=&quot;order&quot;)%&gt;% filter(genome %in% V(graph_neg)$name) %&gt;% select(genome,color) %&gt;% pull(color) #Node size V(graph_neg)$size &lt;- genome_counts_filt[,c(&quot;genome&quot;,sample_subset)] %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% filter(rowSums(select(., where(is.numeric)) != 0) &gt; 3) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% transform(., &#39;clr&#39;) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;genome&quot;) %&gt;% rowwise() %&gt;% mutate(average = mean(c_across(where(is.numeric)), na.rm = TRUE)) %&gt;% ungroup() %&gt;% select(genome,average) %&gt;% filter(genome %in% V(graph_neg)$name) %&gt;% arrange(match(genome,V(graph_neg)$name)) %&gt;% mutate(size = scales::rescale(average, to = c(2, 10))) %&gt;% pull(size) cluster_neg &lt;- cluster_edge_betweenness(graph_neg) communities_neg_TG2 &lt;- split(V(graph_neg)$name, membership(cluster_neg) )%&gt;% keep(~ length(.x) &gt; 1) #Network properties network_positive_TG2 &lt;- tibble(treatment=&quot;TG2&quot;, density=graph.density(graph_pos), modularity=modularity(cluster_walktrap(graph_pos)), assortability=assortativity_degree(graph_pos), connectivity=mean(components(graph_pos)$csize), centrality=eigen_centrality(graph_pos)$value) network_negative_TG2 &lt;- tibble(treatment=&quot;TG2&quot;, density=graph.density(graph_neg), modularity=modularity(cluster_walktrap(graph_neg)), assortability=assortativity_degree(graph_neg), connectivity=mean(components(graph_neg)$csize), centrality=eigen_centrality(graph_neg)$value) corrplot(mag_cor, method = &#39;color&#39;, order = &#39;AOE&#39;) plot( graph_pos, vertex.color = V(graph_pos)$color, vertex.size = V(graph_pos)$size, vertex.label = NA, vertex.frame.color = NA, edge.width = 1, mark.groups = communities(cluster_pos) %&gt;% keep(~ length(.x) &gt;= 2), mark.col = &quot;#f4f4f4&quot;, mark.border = NA, layout = layout_with_fr ) plot( graph_neg, vertex.color = V(graph_neg)$color, vertex.size = V(graph_neg)$size, vertex.label = NA, vertex.frame.color = NA, edge.width = 1, mark.groups = communities(cluster_neg) %&gt;% keep(~ length(.x) &gt;= 2), mark.col = &quot;#f4f4f4&quot;, mark.border = NA, layout = layout_with_fr ) 6.2.3 TG3 sorted_genomes &lt;- genome_tree$tip.label sample_subset &lt;- sample_metadata %&gt;% filter(treatment==&quot;TG2&quot;) %&gt;% pull(sample) mag_cor &lt;- genome_counts_filt[,c(&quot;genome&quot;,sample_subset)] %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% filter(rowSums(select(., where(is.numeric)) != 0) &gt; 3) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% transform(., &#39;clr&#39;) %&gt;% t() %&gt;% cor(.,method=&quot;pearson&quot;) threshold &lt;- 0.7 #Positive correlations mag_cor_pos &lt;- ifelse(mag_cor &gt; threshold, 1, 0) graph_pos &lt;- graph_from_adjacency_matrix(mag_cor_pos, mode = &quot;undirected&quot;, diag = FALSE) #Node color V(graph_pos)$color &lt;- tibble(order=genome_metadata$order %&gt;% unique() %&gt;% sort(), color=order_colors) %&gt;% right_join(genome_metadata,by=&quot;order&quot;)%&gt;% filter(genome %in% V(graph_pos)$name) %&gt;% select(genome,color) %&gt;% pull(color) #Node size V(graph_pos)$size &lt;- genome_counts_filt[,c(&quot;genome&quot;,sample_subset)] %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% filter(rowSums(select(., where(is.numeric)) != 0) &gt; 3) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% transform(., &#39;clr&#39;) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;genome&quot;) %&gt;% rowwise() %&gt;% mutate(average = mean(c_across(where(is.numeric)), na.rm = TRUE)) %&gt;% ungroup() %&gt;% select(genome,average) %&gt;% filter(genome %in% V(graph_pos)$name) %&gt;% arrange(match(genome,V(graph_pos)$name)) %&gt;% mutate(size = scales::rescale(average, to = c(2, 10))) %&gt;% pull(size) cluster_pos &lt;- cluster_edge_betweenness(graph_pos) communities_pos_TG3 &lt;- split(V(graph_pos)$name, membership(cluster_pos) )%&gt;% keep(~ length(.x) &gt; 1) #Negative correlations mag_cor_neg &lt;- ifelse(mag_cor &lt; -threshold, 1, 0) graph_neg &lt;- graph_from_adjacency_matrix(mag_cor_neg, mode = &quot;undirected&quot;, diag = FALSE) #Node color V(graph_neg)$color &lt;- tibble(order=genome_metadata$order %&gt;% unique() %&gt;% sort(), color=order_colors) %&gt;% right_join(genome_metadata,by=&quot;order&quot;)%&gt;% filter(genome %in% V(graph_neg)$name) %&gt;% select(genome,color) %&gt;% pull(color) #Node size V(graph_neg)$size &lt;- genome_counts_filt[,c(&quot;genome&quot;,sample_subset)] %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% filter(rowSums(select(., where(is.numeric)) != 0) &gt; 3) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% transform(., &#39;clr&#39;) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;genome&quot;) %&gt;% rowwise() %&gt;% mutate(average = mean(c_across(where(is.numeric)), na.rm = TRUE)) %&gt;% ungroup() %&gt;% select(genome,average) %&gt;% filter(genome %in% V(graph_neg)$name) %&gt;% arrange(match(genome,V(graph_neg)$name)) %&gt;% mutate(size = scales::rescale(average, to = c(2, 10))) %&gt;% pull(size) cluster_neg &lt;- cluster_edge_betweenness(graph_neg) communities_neg_TG3 &lt;- split(V(graph_neg)$name, membership(cluster_neg) )%&gt;% keep(~ length(.x) &gt; 1) #Network properties network_positive_TG3 &lt;- tibble(treatment=&quot;TG3&quot;, density=graph.density(graph_pos), modularity=modularity(cluster_walktrap(graph_pos)), assortability=assortativity_degree(graph_pos), connectivity=mean(components(graph_pos)$csize), centrality=eigen_centrality(graph_pos)$value) network_negative_TG3 &lt;- tibble(treatment=&quot;TG3&quot;, density=graph.density(graph_neg), modularity=modularity(cluster_walktrap(graph_neg)), assortability=assortativity_degree(graph_neg), connectivity=mean(components(graph_neg)$csize), centrality=eigen_centrality(graph_neg)$value) corrplot(mag_cor, method = &#39;color&#39;, order = &#39;AOE&#39;) plot( graph_pos, vertex.color = V(graph_pos)$color, vertex.size = V(graph_pos)$size, vertex.label = NA, vertex.frame.color = NA, edge.width = 1, mark.groups = communities(cluster_pos) %&gt;% keep(~ length(.x) &gt;= 2), mark.col = &quot;#f4f4f4&quot;, mark.border = NA, layout = layout_with_fr ) plot( graph_neg, vertex.color = V(graph_neg)$color, vertex.size = V(graph_neg)$size, vertex.label = NA, vertex.frame.color = NA, edge.width = 1, mark.groups = communities(cluster_neg) %&gt;% keep(~ length(.x) &gt;= 2), mark.col = &quot;#f4f4f4&quot;, mark.border = NA, layout = layout_with_fr ) 6.2.4 TG4 sorted_genomes &lt;- genome_tree$tip.label sample_subset &lt;- sample_metadata %&gt;% filter(treatment==&quot;TG4&quot;) %&gt;% pull(sample) mag_cor &lt;- genome_counts_filt[,c(&quot;genome&quot;,sample_subset)] %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% filter(rowSums(select(., where(is.numeric)) != 0) &gt; 3) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% transform(., &#39;clr&#39;) %&gt;% t() %&gt;% cor(.,method=&quot;pearson&quot;) threshold &lt;- 0.7 #Positive correlations mag_cor_pos &lt;- ifelse(mag_cor &gt; threshold, 1, 0) graph_pos &lt;- graph_from_adjacency_matrix(mag_cor_pos, mode = &quot;undirected&quot;, diag = FALSE) #Node color V(graph_pos)$color &lt;- tibble(order=genome_metadata$order %&gt;% unique() %&gt;% sort(), color=order_colors) %&gt;% right_join(genome_metadata,by=&quot;order&quot;)%&gt;% filter(genome %in% V(graph_pos)$name) %&gt;% select(genome,color) %&gt;% pull(color) #Node size V(graph_pos)$size &lt;- genome_counts_filt[,c(&quot;genome&quot;,sample_subset)] %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% filter(rowSums(select(., where(is.numeric)) != 0) &gt; 3) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% transform(., &#39;clr&#39;) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;genome&quot;) %&gt;% rowwise() %&gt;% mutate(average = mean(c_across(where(is.numeric)), na.rm = TRUE)) %&gt;% ungroup() %&gt;% select(genome,average) %&gt;% filter(genome %in% V(graph_pos)$name) %&gt;% arrange(match(genome,V(graph_pos)$name)) %&gt;% mutate(size = scales::rescale(average, to = c(2, 10))) %&gt;% pull(size) cluster_pos &lt;- cluster_edge_betweenness(graph_pos) communities_pos_TG4 &lt;- split(V(graph_pos)$name, membership(cluster_pos) )%&gt;% keep(~ length(.x) &gt; 1) #Negative correlations mag_cor_neg &lt;- ifelse(mag_cor &lt; -threshold, 1, 0) graph_neg &lt;- graph_from_adjacency_matrix(mag_cor_neg, mode = &quot;undirected&quot;, diag = FALSE) #Node color V(graph_neg)$color &lt;- tibble(order=genome_metadata$order %&gt;% unique() %&gt;% sort(), color=order_colors) %&gt;% right_join(genome_metadata,by=&quot;order&quot;)%&gt;% filter(genome %in% V(graph_neg)$name) %&gt;% select(genome,color) %&gt;% pull(color) #Node size V(graph_neg)$size &lt;- genome_counts_filt[,c(&quot;genome&quot;,sample_subset)] %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% filter(rowSums(select(., where(is.numeric)) != 0) &gt; 3) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% transform(., &#39;clr&#39;) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;genome&quot;) %&gt;% rowwise() %&gt;% mutate(average = mean(c_across(where(is.numeric)), na.rm = TRUE)) %&gt;% ungroup() %&gt;% select(genome,average) %&gt;% filter(genome %in% V(graph_neg)$name) %&gt;% arrange(match(genome,V(graph_neg)$name)) %&gt;% mutate(size = scales::rescale(average, to = c(2, 10))) %&gt;% pull(size) cluster_neg &lt;- cluster_edge_betweenness(graph_neg) communities_neg_TG4 &lt;- split(V(graph_neg)$name, membership(cluster_neg) )%&gt;% keep(~ length(.x) &gt; 1) #Network properties network_positive_TG4 &lt;- tibble(treatment=&quot;TG4&quot;, density=graph.density(graph_pos), modularity=modularity(cluster_walktrap(graph_pos)), assortability=assortativity_degree(graph_pos), connectivity=mean(components(graph_pos)$csize), centrality=eigen_centrality(graph_pos)$value) network_negative_TG4 &lt;- tibble(treatment=&quot;TG4&quot;, density=graph.density(graph_neg), modularity=modularity(cluster_walktrap(graph_neg)), assortability=assortativity_degree(graph_neg), connectivity=mean(components(graph_neg)$csize), centrality=eigen_centrality(graph_neg)$value) corrplot(mag_cor, method = &#39;color&#39;, order = &#39;AOE&#39;) plot( graph_pos, vertex.color = V(graph_pos)$color, vertex.size = V(graph_pos)$size, vertex.label = NA, vertex.frame.color = NA, edge.width = 1, mark.groups = communities(cluster_pos) %&gt;% keep(~ length(.x) &gt;= 2), mark.col = &quot;#f4f4f4&quot;, mark.border = NA, layout = layout_with_fr ) plot( graph_neg, vertex.color = V(graph_neg)$color, vertex.size = V(graph_neg)$size, vertex.label = NA, vertex.frame.color = NA, edge.width = 1, mark.groups = communities(cluster_neg) %&gt;% keep(~ length(.x) &gt;= 2), mark.col = &quot;#f4f4f4&quot;, mark.border = NA, layout = layout_with_fr ) 6.2.5 TG5 sorted_genomes &lt;- genome_tree$tip.label sample_subset &lt;- sample_metadata %&gt;% filter(treatment==&quot;TG5&quot;) %&gt;% pull(sample) mag_cor &lt;- genome_counts_filt[,c(&quot;genome&quot;,sample_subset)] %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% filter(rowSums(select(., where(is.numeric)) != 0) &gt; 3) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% transform(., &#39;clr&#39;) %&gt;% t() %&gt;% cor(.,method=&quot;pearson&quot;) threshold &lt;- 0.7 #Positive correlations mag_cor_pos &lt;- ifelse(mag_cor &gt; threshold, 1, 0) graph_pos &lt;- graph_from_adjacency_matrix(mag_cor_pos, mode = &quot;undirected&quot;, diag = FALSE) #Node color V(graph_pos)$color &lt;- tibble(order=genome_metadata$order %&gt;% unique() %&gt;% sort(), color=order_colors) %&gt;% right_join(genome_metadata,by=&quot;order&quot;)%&gt;% filter(genome %in% V(graph_pos)$name) %&gt;% select(genome,color) %&gt;% pull(color) #Node size V(graph_pos)$size &lt;- genome_counts_filt[,c(&quot;genome&quot;,sample_subset)] %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% filter(rowSums(select(., where(is.numeric)) != 0) &gt; 3) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% transform(., &#39;clr&#39;) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;genome&quot;) %&gt;% rowwise() %&gt;% mutate(average = mean(c_across(where(is.numeric)), na.rm = TRUE)) %&gt;% ungroup() %&gt;% select(genome,average) %&gt;% filter(genome %in% V(graph_pos)$name) %&gt;% arrange(match(genome,V(graph_pos)$name)) %&gt;% mutate(size = scales::rescale(average, to = c(2, 10))) %&gt;% pull(size) cluster_pos &lt;- cluster_edge_betweenness(graph_pos) communities_pos_TG5 &lt;- split(V(graph_pos)$name, membership(cluster_pos) )%&gt;% keep(~ length(.x) &gt; 1) #Negative correlations mag_cor_neg &lt;- ifelse(mag_cor &lt; -threshold, 1, 0) graph_neg &lt;- graph_from_adjacency_matrix(mag_cor_neg, mode = &quot;undirected&quot;, diag = FALSE) #Node color V(graph_neg)$color &lt;- tibble(order=genome_metadata$order %&gt;% unique() %&gt;% sort(), color=order_colors) %&gt;% right_join(genome_metadata,by=&quot;order&quot;)%&gt;% filter(genome %in% V(graph_neg)$name) %&gt;% select(genome,color) %&gt;% pull(color) #Node size V(graph_neg)$size &lt;- genome_counts_filt[,c(&quot;genome&quot;,sample_subset)] %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% filter(rowSums(select(., where(is.numeric)) != 0) &gt; 3) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% transform(., &#39;clr&#39;) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;genome&quot;) %&gt;% rowwise() %&gt;% mutate(average = mean(c_across(where(is.numeric)), na.rm = TRUE)) %&gt;% ungroup() %&gt;% select(genome,average) %&gt;% filter(genome %in% V(graph_neg)$name) %&gt;% arrange(match(genome,V(graph_neg)$name)) %&gt;% mutate(size = scales::rescale(average, to = c(2, 10))) %&gt;% pull(size) cluster_neg &lt;- cluster_edge_betweenness(graph_neg) communities_neg_TG5 &lt;- split(V(graph_neg)$name, membership(cluster_neg) )%&gt;% keep(~ length(.x) &gt; 1) #Network properties network_positive_TG5 &lt;- tibble(treatment=&quot;TG5&quot;, density=graph.density(graph_pos), modularity=modularity(cluster_walktrap(graph_pos)), assortability=assortativity_degree(graph_pos), connectivity=mean(components(graph_pos)$csize), centrality=eigen_centrality(graph_pos)$value) network_negative_TG5 &lt;- tibble(treatment=&quot;TG5&quot;, density=graph.density(graph_neg), modularity=modularity(cluster_walktrap(graph_neg)), assortability=assortativity_degree(graph_neg), connectivity=mean(components(graph_neg)$csize), centrality=eigen_centrality(graph_neg)$value) corrplot(mag_cor, method = &#39;color&#39;, order = &#39;AOE&#39;) plot( graph_pos, vertex.color = V(graph_pos)$color, vertex.size = V(graph_pos)$size, vertex.label = NA, vertex.frame.color = NA, edge.width = 1, mark.groups = communities(cluster_pos) %&gt;% keep(~ length(.x) &gt;= 2), mark.col = &quot;#f4f4f4&quot;, mark.border = NA, layout = layout_with_fr ) plot( graph_neg, vertex.color = V(graph_neg)$color, vertex.size = V(graph_neg)$size, vertex.label = NA, vertex.frame.color = NA, edge.width = 1, mark.groups = communities(cluster_neg) %&gt;% keep(~ length(.x) &gt;= 2), mark.col = &quot;#f4f4f4&quot;, mark.border = NA, layout = layout_with_fr ) 6.3 Combined 6.3.1 Network properties How the nodes in the graph tend to cluster together, indicating how tightly correlated groups of genomes are. bind_rows(network_positive_d7, network_positive_d14, network_positive_d21, network_positive_d28, network_positive_d35) %&gt;% tt() .table td.tinytable_css_idnj5z2ol2yharlcz6blm7, .table th.tinytable_css_idnj5z2ol2yharlcz6blm7 { border-bottom: solid 0.1em #d3d8dc; } day density modularity assortability connectivity centrality day7 0.02898551 0.7108564 0.4534088 2.464286 5.356402 day14 0.01832907 0.8566793 0.1627001 1.916667 3.411426 day21 0.05297158 0.6595253 0.7433303 5.931034 25.187985 day28 0.04900662 0.7412937 0.7938659 6.291667 19.910469 day35 0.04781551 0.7829484 0.8335534 6.571429 14.669188 bind_rows(network_negative_d7, network_negative_d14, network_negative_d21, network_negative_d28, network_negative_d35) %&gt;% tt() .table td.tinytable_css_idxoeqgc19cgp9v2vujzuu, .table th.tinytable_css_idxoeqgc19cgp9v2vujzuu { border-bottom: solid 0.1em #d3d8dc; } day density modularity assortability connectivity centrality day7 0.02983802 0.6322449 0.4174550 3.285714 4.771890 day14 0.01193521 0.6817602 0.1482890 1.533333 3.046309 day21 0.01495988 0.6810744 -0.3395006 2.567164 8.203132 day28 0.01660044 0.6420750 -0.4033989 2.649123 7.023332 day35 0.02528298 0.6870766 -0.5396025 4.451613 7.077941 bind_rows(network_positive_TG1, network_positive_TG2, network_positive_TG3, network_positive_TG4, network_positive_TG5)%&gt;% tt() .table td.tinytable_css_id6oydnpkxp3eiw1xkioxz, .table th.tinytable_css_id6oydnpkxp3eiw1xkioxz { border-bottom: solid 0.1em #d3d8dc; } treatment density modularity assortability connectivity centrality TG1 0.10008591 0.5870043 0.5231654 4.041667 19.215842 TG2 0.04949608 0.5685080 0.4027239 3.800000 11.561955 TG3 0.04949608 0.5685080 0.4027239 3.800000 11.561955 TG4 0.06074561 0.6194333 0.5257698 3.692308 14.593375 TG5 0.05030644 0.7195754 0.4255001 3.869565 9.706974 bind_rows(network_negative_TG1, network_negative_TG2, network_negative_TG3, network_negative_TG4, network_negative_TG5) %&gt;% tt() .table td.tinytable_css_id21ixmftbj3d9nh77bzfk, .table th.tinytable_css_id21ixmftbj3d9nh77bzfk { border-bottom: solid 0.1em #d3d8dc; } treatment density modularity assortability connectivity centrality TG1 0.08075601 0.04194135 0.10293399 2.552632 17.171754 TG2 0.03852184 0.11959167 -0.18242183 1.826923 11.222618 TG3 0.03852184 0.11959167 -0.18242183 1.826923 11.222618 TG4 0.03399123 0.20002081 0.20107116 2.042553 10.008741 TG5 0.03472932 0.50981293 0.03896628 2.282051 7.511184 bind_rows(network_positive_d7, network_positive_d14, network_positive_d21, network_positive_d28, network_positive_d35) %&gt;% mutate(day=factor(day,levels=c(&quot;day7&quot;,&quot;day14&quot;,&quot;day21&quot;,&quot;day28&quot;,&quot;day35&quot;))) %&gt;% pivot_longer(!day, names_to=&quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% filter(metric != &quot;assortability&quot;) %&gt;% ggplot(aes(x=day, y=value)) + geom_col() + facet_wrap(. ~ metric, scales=&quot;free&quot;, nrow = 1) + theme_classic() bind_rows(network_negative_d7, network_negative_d14, network_negative_d21, network_negative_d28, network_negative_d35) %&gt;% mutate(day=factor(day,levels=c(&quot;day7&quot;,&quot;day14&quot;,&quot;day21&quot;,&quot;day28&quot;,&quot;day35&quot;))) %&gt;% pivot_longer(!day, names_to=&quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% filter(metric != &quot;assortability&quot;) %&gt;% ggplot(aes(x=day, y=value)) + geom_col() + facet_wrap(. ~ metric, scales=&quot;free&quot;, nrow = 1) + theme_classic() bind_rows(network_positive_TG1, network_positive_TG2, network_positive_TG3, network_positive_TG4, network_positive_TG5) %&gt;% mutate(treatment=factor(treatment,levels=c(&quot;TG1&quot;,&quot;TG2&quot;,&quot;TG3&quot;,&quot;TG4&quot;,&quot;TG5&quot;))) %&gt;% pivot_longer(!treatment, names_to=&quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% filter(metric != &quot;assortability&quot;) %&gt;% ggplot(aes(x=treatment, y=value)) + geom_col() + facet_wrap(. ~ metric, scales=&quot;free&quot;, nrow = 1) + theme_classic() bind_rows(network_negative_TG1, network_negative_TG2, network_negative_TG3, network_negative_TG4, network_negative_TG5) %&gt;% mutate(treatment=factor(treatment,levels=c(&quot;TG1&quot;,&quot;TG2&quot;,&quot;TG3&quot;,&quot;TG4&quot;,&quot;TG5&quot;))) %&gt;% pivot_longer(!treatment, names_to=&quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% filter(metric != &quot;assortability&quot;) %&gt;% ggplot(aes(x=treatment, y=value)) + geom_col() + facet_wrap(. ~ metric, scales=&quot;free&quot;, nrow = 1) + theme_classic() 6.3.2 Positive correlations 6.3.2.1 Clusters per day day_clusters_positive &lt;- c(communities_pos_7, communities_pos_14, communities_pos_21, communities_pos_28, communities_pos_35) %&gt;% purrr::map(~ combn(.x, 2, simplify = FALSE)) %&gt;% unlist(recursive = FALSE) %&gt;% purrr::map(~ sort(.x)) # Calculate functional distances day_clusters_positive &lt;- table(map_chr(day_clusters_positive, ~ paste(.x, collapse = &quot; - &quot;))) %&gt;% as.data.frame(., stringsAsFactors = FALSE) %&gt;% rename(genomes=1,count=2) %&gt;% mutate(distance = map_dbl(genomes, function(pair) { genomes &lt;- str_split(pair, &quot; - &quot;, simplify = TRUE) dist_value &lt;- stats::dist(genome_gifts[genomes, ], method = &quot;manhattan&quot;) / ncol(genome_gifts[genomes, ]) return(as.numeric(dist_value)) })) %&gt;% arrange(-count) # Print top pairs day_clusters_positive %&gt;% filter(count&gt;3) %&gt;% tt() .table td.tinytable_css_idu46dg3xdyqt24u8ms9l1, .table th.tinytable_css_idu46dg3xdyqt24u8ms9l1 { border-bottom: solid 0.1em #d3d8dc; } genomes count distance D300452:bin_000016 - GPB:bin_000208 5 0.07025397 D300452:bin_000016 - GPB:bin_000009 4 0.31057143 D300452:bin_000016 - GPB:bin_000021 4 0.10955556 D300472:bin_000003 - TG1:bin_000014 4 0.13850794 D300472:bin_000003 - TG2_14:bin_000017 4 0.11273016 D300481:bin_000002 - GPB:bin_000021 4 0.09898413 D300482:bin_000009 - TG2:bin_000003 4 0.17666667 D300482:bin_000009 - TG3:bin_000068 4 0.09482540 GPB:bin_000009 - GPB:bin_000021 4 0.29600000 GPB:bin_000009 - GPB:bin_000208 4 0.31917460 GPB:bin_000010 - GPB:bin_000140 4 0.27104762 GPB:bin_000021 - GPB:bin_000208 4 0.10939683 GPB:bin_000127 - TG2_07:bin_000029 4 0.11314286 GPB:bin_000127 - TG2_28:bin_000031 4 0.13279365 TG1:bin_000014 - TG2_14:bin_000017 4 0.12203175 TG2_07:bin_000029 - TG2_28:bin_000031 4 0.13063492 TG2:bin_000003 - TG3:bin_000068 4 0.14641270 6.3.2.2 Clusters per treatment treatment_clusters_positive &lt;- c(communities_pos_TG1, communities_pos_TG2, communities_pos_TG3, communities_pos_TG4, communities_pos_TG5) %&gt;% purrr::map(~ combn(.x, 2, simplify = FALSE)) %&gt;% unlist(recursive = FALSE) %&gt;% purrr::map(~ sort(.x)) # Calculate functional distances treatment_clusters_positive &lt;- table(map_chr(treatment_clusters_positive, ~ paste(.x, collapse = &quot; - &quot;))) %&gt;% as.data.frame(., stringsAsFactors = FALSE) %&gt;% rename(genomes=1,count=2) %&gt;% mutate(distance = map_dbl(genomes, function(pair) { genomes &lt;- str_split(pair, &quot; - &quot;, simplify = TRUE) dist_value &lt;- stats::dist(genome_gifts[genomes, ], method = &quot;manhattan&quot;) / ncol(genome_gifts[genomes, ]) return(as.numeric(dist_value)) })) %&gt;% arrange(-count) # Print top pairs treatment_clusters_positive %&gt;% filter(count&gt;3) %&gt;% tt() .table td.tinytable_css_id3arcfaq75h5s34ac0cke, .table th.tinytable_css_id3arcfaq75h5s34ac0cke { border-bottom: solid 0.1em #d3d8dc; } genomes count distance D300452:bin_000016 - GPB:bin_000140 5 0.12161905 GPB:bin_000015 - GPB:bin_000034 5 0.02752381 GPB:bin_000143 - TG5_28:bin_000003 5 0.09393651 D300444:bin_000010 - GPB:bin_000009 4 0.29526984 D300509:bin_000001 - GPB:bin_000194 4 0.12076190 GPB:bin_000002 - GPB:bin_000009 4 0.16752381 GPB:bin_000059 - GPB:bin_000143 4 0.13358730 GPB:bin_000059 - TG5_28:bin_000003 4 0.11190476 6.3.2.3 Cluster combined all_clusters_positive &lt;- c(communities_pos_7, communities_pos_14, communities_pos_21, communities_pos_28, communities_pos_35, communities_pos_TG1, communities_pos_TG2, communities_pos_TG3, communities_pos_TG4, communities_pos_TG5) %&gt;% purrr::map(~ combn(.x, 2, simplify = FALSE)) %&gt;% unlist(recursive = FALSE) %&gt;% purrr::map(~ sort(.x)) # Calculate functional distances all_clusters_positive &lt;- table(map_chr(all_clusters_positive, ~ paste(.x, collapse = &quot; - &quot;))) %&gt;% as.data.frame(., stringsAsFactors = FALSE) %&gt;% rename(genomes=1,count=2) %&gt;% mutate(distance = map_dbl(genomes, function(pair) { genomes &lt;- str_split(pair, &quot; - &quot;, simplify = TRUE) dist_value &lt;- stats::dist(genome_gifts[genomes, ], method = &quot;manhattan&quot;) / ncol(genome_gifts[genomes, ]) return(as.numeric(dist_value)) })) %&gt;% arrange(-count) # Print top pairs all_clusters_positive %&gt;% filter(count&gt;5) %&gt;% tt() .table td.tinytable_css_idlhb84iqe6sekgp5f5kan, .table th.tinytable_css_idlhb84iqe6sekgp5f5kan { border-bottom: solid 0.1em #d3d8dc; } genomes count distance D300452:bin_000016 - GPB:bin_000140 8 0.12161905 D300452:bin_000016 - GPB:bin_000208 8 0.07025397 GPB:bin_000015 - GPB:bin_000034 8 0.02752381 D300452:bin_000016 - GPB:bin_000009 7 0.31057143 D300472:bin_000003 - TG2_14:bin_000017 7 0.11273016 D300481:bin_000002 - GPB:bin_000021 7 0.09898413 GPB:bin_000009 - GPB:bin_000021 7 0.29600000 GPB:bin_000009 - GPB:bin_000208 7 0.31917460 GPB:bin_000010 - GPB:bin_000140 7 0.27104762 D300435:bin_000001 - D300452:bin_000016 6 0.12930159 D300435:bin_000001 - GPB:bin_000208 6 0.14438095 D300444:bin_000010 - GPB:bin_000009 6 0.29526984 D300452:bin_000016 - GPB:bin_000010 6 0.28257143 D300482:bin_000009 - TG2:bin_000003 6 0.17666667 D300482:bin_000009 - TG3:bin_000068 6 0.09482540 D300500:bin_000011 - TG1:bin_000014 6 0.10250794 D300509:bin_000001 - GPB:bin_000194 6 0.12076190 GPB:bin_000002 - GPB:bin_000009 6 0.16752381 GPB:bin_000009 - GPB:bin_000010 6 0.11092063 GPB:bin_000009 - GPB:bin_000140 6 0.30844444 GPB:bin_000010 - GPB:bin_000208 6 0.29155556 GPB:bin_000059 - GPB:bin_000124 6 0.11126984 GPB:bin_000059 - GPB:bin_000131 6 0.13409524 GPB:bin_000123 - GPB:bin_000175 6 0.14961905 GPB:bin_000140 - GPB:bin_000208 6 0.14742857 GPB:bin_000143 - TG5_28:bin_000003 6 0.09393651 GPB:bin_000194 - TG1:bin_000014 6 0.12644444 TG2:bin_000003 - TG3:bin_000068 6 0.14641270 day_clusters_positive_filtered &lt;- day_clusters_positive %&gt;% filter(count&gt;3) %&gt;% rename(count_day=count) %&gt;% mutate(clustering_day=TRUE) treatment_clusters_positive_filtered &lt;- treatment_clusters_positive %&gt;% filter(count&gt;3) %&gt;% rename(count_treatment=count) %&gt;% mutate(clustering_treatment=TRUE) all_clusters_positive_filtered &lt;- all_clusters_positive %&gt;% filter(count &gt; 5) %&gt;% rename(count_all=count) %&gt;% mutate(clustering_all=TRUE) associated_pairs_positive &lt;- all_clusters_positive_filtered %&gt;% full_join(day_clusters_positive_filtered, by=join_by(&quot;genomes&quot;==&quot;genomes&quot;,&quot;distance&quot;==&quot;distance&quot;)) %&gt;% full_join(treatment_clusters_positive_filtered, by=join_by(&quot;genomes&quot;==&quot;genomes&quot;,&quot;distance&quot;==&quot;distance&quot;)) %&gt;% rowwise() %&gt;% mutate(count=max(count_all,count_day,count_treatment, na.rm=TRUE)) %&gt;% mutate(clustering = case_when( clustering_all == TRUE ~ &quot;all&quot;, # If clustering_all is TRUE clustering_day == TRUE &amp; is.na(clustering_all) &amp; is.na(clustering_treatment) ~ &quot;day&quot;, clustering_treatment == TRUE &amp; is.na(clustering_all) &amp; is.na(clustering_day) ~ &quot;treatment&quot;)) %&gt;% select(genomes,count,clustering,distance) %&gt;% mutate(clustering=factor(clustering)) %&gt;% #add coordinates separate(genomes, into = c(&quot;genome1&quot;, &quot;genome2&quot;), sep = &quot; - &quot;) %&gt;% left_join(gift_pcoa_vectors %&gt;% rownames_to_column(var = &quot;genome&quot;), by = c(&quot;genome1&quot; = &quot;genome&quot;)) %&gt;% rename(x1 = Axis.1, y1 = Axis.2) %&gt;% left_join(gift_pcoa_vectors %&gt;% rownames_to_column(var = &quot;genome&quot;), by = c(&quot;genome2&quot; = &quot;genome&quot;)) %&gt;% rename(x2 = Axis.1, y2 = Axis.2) associated_pairs_positive %&gt;% select(genome1,genome2,count,clustering) %&gt;% left_join(genome_metadata %&gt;% select(genome,order,species),by=join_by(genome1==genome)) %&gt;% left_join(genome_metadata %&gt;% select(genome,order,species),by=join_by(genome2==genome)) %&gt;% tt() .table td.tinytable_css_idmlo1b6uqwbn22nr8advn, .table th.tinytable_css_idmlo1b6uqwbn22nr8advn { border-bottom: solid 0.1em #d3d8dc; } genome1 genome2 count clustering order.x species.x order.y species.y D300452:bin_000016 GPB:bin_000140 8 all o__Lachnospirales s__Eisenbergiella sp904392525 o__Oscillospirales s__Flavonifractor plautii D300452:bin_000016 GPB:bin_000208 8 all o__Lachnospirales s__Eisenbergiella sp904392525 o__Lachnospirales s__Eisenbergiella intestinigallinarum GPB:bin_000015 GPB:bin_000034 8 all o__Oscillospirales s__Lawsonibacter pullicola o__Oscillospirales s__Lawsonibacter sp900545895 D300452:bin_000016 GPB:bin_000009 7 all o__Lachnospirales s__Eisenbergiella sp904392525 o__Enterobacterales s__Klebsiella pneumoniae D300472:bin_000003 TG2_14:bin_000017 7 all o__Christensenellales s__Borkfalkia sp904373255 o__Oscillospirales s__Heritagella sp905215105 D300481:bin_000002 GPB:bin_000021 7 all o__Oscillospirales s__Merdivicinus intestinigallinarum o__Oscillospirales s__Anaeromassilibacillus stercoravium GPB:bin_000009 GPB:bin_000021 7 all o__Enterobacterales s__Klebsiella pneumoniae o__Oscillospirales s__Anaeromassilibacillus stercoravium GPB:bin_000009 GPB:bin_000208 7 all o__Enterobacterales s__Klebsiella pneumoniae o__Lachnospirales s__Eisenbergiella intestinigallinarum GPB:bin_000010 GPB:bin_000140 7 all o__Enterobacterales s__Escherichia coli o__Oscillospirales s__Flavonifractor plautii D300435:bin_000001 D300452:bin_000016 6 all o__Lachnospirales s__Anaerotignum merdipullorum o__Lachnospirales s__Eisenbergiella sp904392525 D300435:bin_000001 GPB:bin_000208 6 all o__Lachnospirales s__Anaerotignum merdipullorum o__Lachnospirales s__Eisenbergiella intestinigallinarum D300444:bin_000010 GPB:bin_000009 6 all o__Lachnospirales s__Enterocloster excrementigallinarum o__Enterobacterales s__Klebsiella pneumoniae D300452:bin_000016 GPB:bin_000010 6 all o__Lachnospirales s__Eisenbergiella sp904392525 o__Enterobacterales s__Escherichia coli D300482:bin_000009 TG2:bin_000003 6 all o__Lachnospirales s__Mediterraneibacter sp900761655 o__Lactobacillales s__Limosilactobacillus reuteri_E D300482:bin_000009 TG3:bin_000068 6 all o__Lachnospirales s__Mediterraneibacter sp900761655 o__Lachnospirales s__An181 sp002160325 D300500:bin_000011 TG1:bin_000014 6 all o__Oscillospirales s__Gemmiger stercoravium o__Erysipelotrichales s__Merdibacter merdigallinarum D300509:bin_000001 GPB:bin_000194 6 all o__Erysipelotrichales s__Massilimicrobiota merdigallinarum o__Lachnospirales s__Lachnoclostridium_B sp002160985 GPB:bin_000002 GPB:bin_000009 6 all o__Enterobacterales s__Proteus mirabilis o__Enterobacterales s__Klebsiella pneumoniae GPB:bin_000009 GPB:bin_000010 6 all o__Enterobacterales s__Klebsiella pneumoniae o__Enterobacterales s__Escherichia coli GPB:bin_000009 GPB:bin_000140 6 all o__Enterobacterales s__Klebsiella pneumoniae o__Oscillospirales s__Flavonifractor plautii GPB:bin_000010 GPB:bin_000208 6 all o__Enterobacterales s__Escherichia coli o__Lachnospirales s__Eisenbergiella intestinigallinarum GPB:bin_000059 GPB:bin_000124 6 all o__Oscillospirales s__Dysosmobacter avistercoris o__Lachnospirales s__Copromonas faecavium GPB:bin_000059 GPB:bin_000131 6 all o__Oscillospirales s__Dysosmobacter avistercoris o__Christensenellales s__Borkfalkia excrementigallinarum GPB:bin_000123 GPB:bin_000175 6 all o__Oscillospirales s__Faecousia gallistercoris o__Lachnospirales s__Mediterraneibacter intestinavium GPB:bin_000140 GPB:bin_000208 6 all o__Oscillospirales s__Flavonifractor plautii o__Lachnospirales s__Eisenbergiella intestinigallinarum GPB:bin_000143 TG5_28:bin_000003 6 all o__Lachnospirales s__Blautia ornithocaccae o__Erysipelotrichales s__Thomasclavelia spiroformis GPB:bin_000194 TG1:bin_000014 6 all o__Lachnospirales s__Lachnoclostridium_B sp002160985 o__Erysipelotrichales s__Merdibacter merdigallinarum TG2:bin_000003 TG3:bin_000068 6 all o__Lactobacillales s__Limosilactobacillus reuteri_E o__Lachnospirales s__An181 sp002160325 D300452:bin_000016 GPB:bin_000021 4 day o__Lachnospirales s__Eisenbergiella sp904392525 o__Oscillospirales s__Anaeromassilibacillus stercoravium D300472:bin_000003 TG1:bin_000014 4 day o__Christensenellales s__Borkfalkia sp904373255 o__Erysipelotrichales s__Merdibacter merdigallinarum GPB:bin_000021 GPB:bin_000208 4 day o__Oscillospirales s__Anaeromassilibacillus stercoravium o__Lachnospirales s__Eisenbergiella intestinigallinarum GPB:bin_000127 TG2_07:bin_000029 4 day o__Oscillospirales s__Onthovicinus excrementipullorum o__Lachnospirales s__Mediterraneibacter vanvlietii GPB:bin_000127 TG2_28:bin_000031 4 day o__Oscillospirales s__Onthovicinus excrementipullorum o__Lachnospirales s__Anaerostipes butyraticus TG1:bin_000014 TG2_14:bin_000017 4 day o__Erysipelotrichales s__Merdibacter merdigallinarum o__Oscillospirales s__Heritagella sp905215105 TG2_07:bin_000029 TG2_28:bin_000031 4 day o__Lachnospirales s__Mediterraneibacter vanvlietii o__Lachnospirales s__Anaerostipes butyraticus GPB:bin_000059 GPB:bin_000143 4 treatment o__Oscillospirales s__Dysosmobacter avistercoris o__Lachnospirales s__Blautia ornithocaccae GPB:bin_000059 TG5_28:bin_000003 4 treatment o__Oscillospirales s__Dysosmobacter avistercoris o__Erysipelotrichales s__Thomasclavelia spiroformis 6.3.3 Negative correlations 6.3.3.1 Clusters per day day_clusters_negative &lt;- c(communities_neg_7, communities_neg_14, communities_neg_21, communities_neg_28, communities_neg_35) %&gt;% purrr::map(~ combn(.x, 2, simplify = FALSE)) %&gt;% unlist(recursive = FALSE) %&gt;% purrr::map(~ sort(.x)) # Calculate functional distances day_clusters_negative &lt;- table(map_chr(day_clusters_negative, ~ paste(.x, collapse = &quot; - &quot;))) %&gt;% as.data.frame(., stringsAsFactors = FALSE) %&gt;% rename(genomes=1,count=2) %&gt;% mutate(distance = map_dbl(genomes, function(pair) { genomes &lt;- str_split(pair, &quot; - &quot;, simplify = TRUE) dist_value &lt;- stats::dist(genome_gifts[genomes, ], method = &quot;manhattan&quot;) / ncol(genome_gifts[genomes, ]) return(as.numeric(dist_value)) })) %&gt;% arrange(-count) # Print top pairs day_clusters_negative %&gt;% filter(count&gt;3) %&gt;% tt() .table td.tinytable_css_idrk0tg3tabgoihwqhhgui, .table th.tinytable_css_idrk0tg3tabgoihwqhhgui { border-bottom: solid 0.1em #d3d8dc; } genomes count distance D300482:bin_000009 - GPB:bin_000053 4 0.06346032 D300482:bin_000009 - TG2:bin_000003 4 0.17666667 GPB:bin_000025 - GPB:bin_000146 4 0.14895238 GPB:bin_000053 - GPB:bin_000092 4 0.07273016 GPB:bin_000053 - TG2:bin_000003 4 0.15295238 GPB:bin_000124 - GPB:bin_000181 4 0.12419048 6.3.3.2 Clusters per treatment treatment_clusters_negative &lt;- c(communities_neg_TG1, communities_neg_TG2, communities_neg_TG3, communities_neg_TG4, communities_neg_TG5) %&gt;% purrr::map(~ combn(.x, 2, simplify = FALSE)) %&gt;% unlist(recursive = FALSE) %&gt;% purrr::map(~ sort(.x)) # Calculate functional distances treatment_clusters_negative &lt;- table(map_chr(treatment_clusters_negative, ~ paste(.x, collapse = &quot; - &quot;))) %&gt;% as.data.frame(., stringsAsFactors = FALSE) %&gt;% rename(genomes=1,count=2) %&gt;% mutate(distance = map_dbl(genomes, function(pair) { genomes &lt;- str_split(pair, &quot; - &quot;, simplify = TRUE) dist_value &lt;- stats::dist(genome_gifts[genomes, ], method = &quot;manhattan&quot;) / ncol(genome_gifts[genomes, ]) return(as.numeric(dist_value)) })) %&gt;% arrange(-count) # Print top pairs treatment_clusters_negative %&gt;% filter(count&gt;3) %&gt;% tt() .table td.tinytable_css_idmvo50gy6kayl4ujzhr4h, .table th.tinytable_css_idmvo50gy6kayl4ujzhr4h { border-bottom: solid 0.1em #d3d8dc; } genomes count distance GPB:bin_000002 - GPB:bin_000054 5 0.22371429 GPB:bin_000208 - TG5_28:bin_000003 5 0.11015873 D300481:bin_000002 - GPB:bin_000124 4 0.13396825 D300509:bin_000001 - GPB:bin_000124 4 0.10571429 D300509:bin_000001 - GPB:bin_000208 4 0.10692063 D300509:bin_000001 - TG5_28:bin_000003 4 0.05168254 D300511:bin_000002 - GPB:bin_000197 4 0.14053968 GPB:bin_000002 - TG5_28:bin_000004 4 0.34053968 GPB:bin_000054 - TG5_28:bin_000004 4 0.19911111 GPB:bin_000059 - GPB:bin_000130 4 0.17339683 GPB:bin_000059 - GPB:bin_000197 4 0.09558730 GPB:bin_000123 - GPB:bin_000208 4 0.13295238 GPB:bin_000123 - TG5_28:bin_000003 4 0.12996825 GPB:bin_000124 - GPB:bin_000208 4 0.11561905 GPB:bin_000124 - TG5_28:bin_000003 4 0.10698413 GPB:bin_000130 - GPB:bin_000197 4 0.16625397 GPB:bin_000194 - GPB:bin_000208 4 0.12336508 GPB:bin_000194 - TG5_28:bin_000003 4 0.10946032 6.3.3.3 Cluster combined all_clusters_negative &lt;- c(communities_neg_7, communities_neg_14, communities_neg_21, communities_neg_28, communities_neg_35, communities_neg_TG1, communities_neg_TG2, communities_neg_TG3, communities_neg_TG4, communities_neg_TG5) %&gt;% purrr::map(~ combn(.x, 2, simplify = FALSE)) %&gt;% unlist(recursive = FALSE) %&gt;% purrr::map(~ sort(.x)) # Calculate functional distances all_clusters_negative &lt;- table(map_chr(all_clusters_negative, ~ paste(.x, collapse = &quot; - &quot;))) %&gt;% as.data.frame(., stringsAsFactors = FALSE) %&gt;% rename(genomes=1,count=2) %&gt;% mutate(distance = map_dbl(genomes, function(pair) { genomes &lt;- str_split(pair, &quot; - &quot;, simplify = TRUE) dist_value &lt;- stats::dist(genome_gifts[genomes, ], method = &quot;manhattan&quot;) / ncol(genome_gifts[genomes, ]) return(as.numeric(dist_value)) })) %&gt;% arrange(-count) # Print top pairs all_clusters_negative %&gt;% filter(count&gt;5) %&gt;% tt() .table td.tinytable_css_idw4dm8d6a0fd9u46em5wk, .table th.tinytable_css_idw4dm8d6a0fd9u46em5wk { border-bottom: solid 0.1em #d3d8dc; } genomes count distance GPB:bin_000059 - GPB:bin_000130 7 0.17339683 D300452:bin_000016 - GPB:bin_000208 6 0.07025397 D300482:bin_000009 - GPB:bin_000053 6 0.06346032 D300482:bin_000009 - TG2:bin_000003 6 0.17666667 GPB:bin_000004 - GPB:bin_000031 6 0.08136508 GPB:bin_000004 - TG3_35:bin_000033 6 0.07961905 GPB:bin_000053 - GPB:bin_000092 6 0.07273016 GPB:bin_000053 - TG2:bin_000003 6 0.15295238 GPB:bin_000059 - GPB:bin_000124 6 0.11126984 GPB:bin_000124 - GPB:bin_000181 6 0.12419048 GPB:bin_000208 - TG5_28:bin_000003 6 0.11015873 day_clusters_negative_filtered &lt;- day_clusters_negative %&gt;% filter(count&gt;3) %&gt;% rename(count_day=count) %&gt;% mutate(clustering_day=TRUE) treatment_clusters_negative_filtered &lt;- treatment_clusters_negative %&gt;% filter(count&gt;3) %&gt;% rename(count_treatment=count) %&gt;% mutate(clustering_treatment=TRUE) all_clusters_negative_filtered &lt;- all_clusters_negative %&gt;% filter(count &gt; 5) %&gt;% rename(count_all=count) %&gt;% mutate(clustering_all=TRUE) associated_pairs_negative &lt;- all_clusters_negative_filtered %&gt;% full_join(day_clusters_negative_filtered, by=join_by(&quot;genomes&quot;==&quot;genomes&quot;,&quot;distance&quot;==&quot;distance&quot;)) %&gt;% full_join(treatment_clusters_negative_filtered, by=join_by(&quot;genomes&quot;==&quot;genomes&quot;,&quot;distance&quot;==&quot;distance&quot;)) %&gt;% rowwise() %&gt;% mutate(count=max(count_all,count_day,count_treatment, na.rm=TRUE)) %&gt;% mutate(clustering = case_when( clustering_all == TRUE ~ &quot;all&quot;, # If clustering_all is TRUE clustering_day == TRUE &amp; is.na(clustering_all) &amp; is.na(clustering_treatment) ~ &quot;day&quot;, clustering_treatment == TRUE &amp; is.na(clustering_all) &amp; is.na(clustering_day) ~ &quot;treatment&quot;)) %&gt;% select(genomes,count,clustering,distance) %&gt;% mutate(clustering=factor(clustering)) %&gt;% #add coordinates separate(genomes, into = c(&quot;genome1&quot;, &quot;genome2&quot;), sep = &quot; - &quot;) %&gt;% left_join(gift_pcoa_vectors %&gt;% rownames_to_column(var = &quot;genome&quot;), by = c(&quot;genome1&quot; = &quot;genome&quot;)) %&gt;% rename(x1 = Axis.1, y1 = Axis.2) %&gt;% left_join(gift_pcoa_vectors %&gt;% rownames_to_column(var = &quot;genome&quot;), by = c(&quot;genome2&quot; = &quot;genome&quot;)) %&gt;% rename(x2 = Axis.1, y2 = Axis.2) associated_pairs_negative %&gt;% select(genome1,genome2,count,clustering) %&gt;% left_join(genome_metadata %&gt;% select(genome,order,species),by=join_by(genome1==genome)) %&gt;% left_join(genome_metadata %&gt;% select(genome,order,species),by=join_by(genome2==genome)) %&gt;% tt() .table td.tinytable_css_idt6mqsk394boym6ovb9i7, .table th.tinytable_css_idt6mqsk394boym6ovb9i7 { border-bottom: solid 0.1em #d3d8dc; } genome1 genome2 count clustering order.x species.x order.y species.y GPB:bin_000059 GPB:bin_000130 7 all o__Oscillospirales s__Dysosmobacter avistercoris o__Oscillospirales s__Negativibacillus faecipullorum D300452:bin_000016 GPB:bin_000208 6 all o__Lachnospirales s__Eisenbergiella sp904392525 o__Lachnospirales s__Eisenbergiella intestinigallinarum D300482:bin_000009 GPB:bin_000053 6 all o__Lachnospirales s__Mediterraneibacter sp900761655 o__Lachnospirales s__Mediterraneibacter excrementipullorum D300482:bin_000009 TG2:bin_000003 6 all o__Lachnospirales s__Mediterraneibacter sp900761655 o__Lactobacillales s__Limosilactobacillus reuteri_E GPB:bin_000004 GPB:bin_000031 6 all o__Oscillospirales s__Acutalibacter stercoravium o__Lachnospirales s__Mediterraneibacter faecigallinarum GPB:bin_000004 TG3_35:bin_000033 6 all o__Oscillospirales s__Acutalibacter stercoravium o__Lachnospirales s__Hungatella_B pullicola GPB:bin_000053 GPB:bin_000092 6 all o__Lachnospirales s__Mediterraneibacter excrementipullorum o__Lachnospirales s__Choladocola avistercoris GPB:bin_000053 TG2:bin_000003 6 all o__Lachnospirales s__Mediterraneibacter excrementipullorum o__Lactobacillales s__Limosilactobacillus reuteri_E GPB:bin_000059 GPB:bin_000124 6 all o__Oscillospirales s__Dysosmobacter avistercoris o__Lachnospirales s__Copromonas faecavium GPB:bin_000124 GPB:bin_000181 6 all o__Lachnospirales s__Copromonas faecavium o__Oscillospirales s__Intestinimonas pullistercoris GPB:bin_000208 TG5_28:bin_000003 6 all o__Lachnospirales s__Eisenbergiella intestinigallinarum o__Erysipelotrichales s__Thomasclavelia spiroformis GPB:bin_000025 GPB:bin_000146 4 day o__Lactobacillales s__Ligilactobacillus salivarius o__Lachnospirales s__Clostridium_Q saccharolyticum_A GPB:bin_000002 GPB:bin_000054 5 treatment o__Enterobacterales s__Proteus mirabilis o__Lachnospirales s__Merdisoma faecalis D300481:bin_000002 GPB:bin_000124 4 treatment o__Oscillospirales s__Merdivicinus intestinigallinarum o__Lachnospirales s__Copromonas faecavium D300509:bin_000001 GPB:bin_000124 4 treatment o__Erysipelotrichales s__Massilimicrobiota merdigallinarum o__Lachnospirales s__Copromonas faecavium D300509:bin_000001 GPB:bin_000208 4 treatment o__Erysipelotrichales s__Massilimicrobiota merdigallinarum o__Lachnospirales s__Eisenbergiella intestinigallinarum D300509:bin_000001 TG5_28:bin_000003 4 treatment o__Erysipelotrichales s__Massilimicrobiota merdigallinarum o__Erysipelotrichales s__Thomasclavelia spiroformis D300511:bin_000002 GPB:bin_000197 4 treatment o__Lachnospirales s__Eisenbergiella merdigallinarum o__Oscillospirales s__Flavonifractor avistercoris GPB:bin_000002 TG5_28:bin_000004 4 treatment o__Enterobacterales s__Proteus mirabilis o__Lactobacillales s__Lactobacillus johnsonii GPB:bin_000054 TG5_28:bin_000004 4 treatment o__Lachnospirales s__Merdisoma faecalis o__Lactobacillales s__Lactobacillus johnsonii GPB:bin_000059 GPB:bin_000197 4 treatment o__Oscillospirales s__Dysosmobacter avistercoris o__Oscillospirales s__Flavonifractor avistercoris GPB:bin_000123 GPB:bin_000208 4 treatment o__Oscillospirales s__Faecousia gallistercoris o__Lachnospirales s__Eisenbergiella intestinigallinarum GPB:bin_000123 TG5_28:bin_000003 4 treatment o__Oscillospirales s__Faecousia gallistercoris o__Erysipelotrichales s__Thomasclavelia spiroformis GPB:bin_000124 GPB:bin_000208 4 treatment o__Lachnospirales s__Copromonas faecavium o__Lachnospirales s__Eisenbergiella intestinigallinarum GPB:bin_000124 TG5_28:bin_000003 4 treatment o__Lachnospirales s__Copromonas faecavium o__Erysipelotrichales s__Thomasclavelia spiroformis GPB:bin_000130 GPB:bin_000197 4 treatment o__Oscillospirales s__Negativibacillus faecipullorum o__Oscillospirales s__Flavonifractor avistercoris GPB:bin_000194 GPB:bin_000208 4 treatment o__Lachnospirales s__Lachnoclostridium_B sp002160985 o__Lachnospirales s__Eisenbergiella intestinigallinarum GPB:bin_000194 TG5_28:bin_000003 4 treatment o__Lachnospirales s__Lachnoclostridium_B sp002160985 o__Erysipelotrichales s__Thomasclavelia spiroformis 6.3.4 Association vs. functional distance weighted_sd &lt;- function(x, w) { weighted_mean &lt;- sum(w * x) / sum(w) variance &lt;- sum(w * (x - weighted_mean)^2) / sum(w) sqrt(variance) } # Summary statistics distance_stats &lt;- bind_rows(associated_pairs_positive %&gt;% mutate(type=&quot;positive&quot;), associated_pairs_negative %&gt;% mutate(type=&quot;negative&quot;)) %&gt;% left_join(genome_metadata %&gt;% select(genome,genus),by=join_by(genome1==genome)) %&gt;% left_join(genome_metadata %&gt;% select(genome,genus),by=join_by(genome2==genome)) %&gt;% filter(genus.x!=genus.y) %&gt;% #remove relationships with same genus due to crossmaping error probability group_by(type) %&gt;% summarise(weighted_mean = sum(distance * count) / sum(count), weighed_sd = weighted_sd(distance, count)) distance_stats %&gt;% tt() .table td.tinytable_css_id09c5rmqy38oc4a1s4i8b, .table th.tinytable_css_id09c5rmqy38oc4a1s4i8b { border-bottom: solid 0.1em #d3d8dc; } type weighted_mean weighed_sd negative 0.1340044 0.05442698 positive 0.1702117 0.07771069 # Permutation test weighted_mean &lt;- function(x, w) { sum(x * w) / sum(w) } permutation_test &lt;- function(data, n_permutations = 1000) { original_diff &lt;- abs(weighted_mean(data$distance[data$type == &quot;positive&quot;], data$count[data$type == &quot;positive&quot;]) - weighted_mean(data$distance[data$type == &quot;negative&quot;], data$count[data$type == &quot;negative&quot;])) perm_diff &lt;- replicate(n_permutations, { shuffled_type &lt;- sample(data$type) abs(weighted_mean(data$distance[shuffled_type == &quot;positive&quot;], data$count[shuffled_type == &quot;positive&quot;]) - weighted_mean(data$distance[shuffled_type == &quot;negative&quot;], data$count[shuffled_type == &quot;negative&quot;])) }) p_value &lt;- mean(perm_diff &gt;= original_diff) return(p_value) } permutation_test(bind_rows(associated_pairs_positive %&gt;% mutate(type=&quot;positive&quot;), associated_pairs_negative %&gt;% mutate(type=&quot;negative&quot;)), n_permutations = 10000) [1] 0.0967 # Calculate the weighted mean distance for the &quot;positive&quot; group weighted_mean_positive &lt;- sum(associated_pairs_positive$distance * associated_pairs_positive$count) / sum(associated_pairs_positive$count) # Calculate the mean of all distances from the functional distance matrix all_distances &lt;- functional_distances[upper.tri(functional_distances, diag = FALSE)] all_distances &lt;- all_distances[!is.na(all_distances)] sampled_distances &lt;- sample(all_distances, size = 37, replace = FALSE) mean_all_distances &lt;- mean(sampled_distances) # Number of permutations n_permutations &lt;- 10000 # Combine the positive distances and all distances into a single vector combined_distances &lt;- c(associated_pairs_positive$distance, sampled_distances) # Get the observed difference in means observed_diff &lt;- weighted_mean_positive - mean_all_distances # Permutation test perm_diff &lt;- replicate(n_permutations, { # Randomly shuffle the combined distances shuffled_distances &lt;- sample(combined_distances) # Split into &quot;positive&quot; group (same size as original positive group) and &quot;all&quot; group shuffled_positive &lt;- shuffled_distances[1:length(associated_pairs_positive$distance)] shuffled_all &lt;- shuffled_distances[(length(associated_pairs_positive$distance) + 1):length(combined_distances)] # Calculate weighted mean for the shuffled positive group (use original counts) shuffled_weighted_mean_positive &lt;- sum(shuffled_positive * associated_pairs_positive$count) / sum(associated_pairs_positive$count) # Calculate the mean for the shuffled all group shuffled_mean_all &lt;- mean(shuffled_all) # Return the difference in means shuffled_weighted_mean_positive - shuffled_mean_all }) # Calculate p-value (two-tailed test) p_value &lt;- mean(abs(perm_diff) &gt;= abs(observed_diff)) p_value [1] 0 # Calculate the weighted mean distance for the &quot;negative&quot; group weighted_mean_negative &lt;- sum(associated_pairs_negative$distance * associated_pairs_negative$count) / sum(associated_pairs_negative$count) # Calculate the mean of all distances from the functional distance matrix all_distances &lt;- functional_distances[upper.tri(functional_distances, diag = FALSE)] all_distances &lt;- all_distances[!is.na(all_distances)] sampled_distances &lt;- sample(all_distances, size = 37, replace = FALSE) mean_all_distances &lt;- mean(sampled_distances) # Number of permutations n_permutations &lt;- 10000 # Combine the negative distances and all distances into a single vector combined_distances &lt;- c(associated_pairs_negative$distance, sampled_distances) # Get the observed difference in means observed_diff &lt;- weighted_mean_negative - mean_all_distances # Permutation test perm_diff &lt;- replicate(n_permutations, { # Randomly shuffle the combined distances shuffled_distances &lt;- sample(combined_distances) # Split into &quot;negative&quot; group (same size as original negative group) and &quot;all&quot; group shuffled_negative &lt;- shuffled_distances[1:length(associated_pairs_negative$distance)] shuffled_all &lt;- shuffled_distances[(length(associated_pairs_negative$distance) + 1):length(combined_distances)] # Calculate weighted mean for the shuffled negative group (use original counts) shuffled_weighted_mean_negative &lt;- sum(shuffled_negative * associated_pairs_negative$count) / sum(associated_pairs_negative$count) # Calculate the mean for the shuffled all group shuffled_mean_all &lt;- mean(shuffled_all) # Return the difference in means shuffled_weighted_mean_negative - shuffled_mean_all }) # Calculate p-value (two-tailed test) p_value &lt;- mean(abs(perm_diff) &gt;= abs(observed_diff)) p_value [1] 0 tibble(dist=functional_distances[upper.tri(functional_distances, diag = FALSE)]) %&gt;% filter(!is.na(dist)) %&gt;% ggplot(aes(x = dist)) + geom_histogram(bins = 10, fill = &quot;skyblue&quot;, color = &quot;black&quot;, alpha = 0.7) + geom_vline(xintercept = pull(distance_stats[1,2]), linetype=&quot;dotted&quot;, color = &quot;red&quot;, size=1.5) + geom_vline(xintercept = pull(distance_stats[2,2]), linetype=&quot;dotted&quot;, color = &quot;green&quot;, size=1.5) + theme_minimal() 6.3.5 Persistent associations gift_pcoa_vectors %&gt;% rownames_to_column(var=&quot;genome&quot;) %&gt;% left_join(genome_metadata, by=&quot;genome&quot;) %&gt;% ggplot() + geom_segment(data = associated_pairs_negative, aes(x = x1, y = y1, xend = x2, yend = y2, linetype=clustering), color=&quot;#f5a2af&quot;, linewidth=1) + geom_segment(data = associated_pairs_positive, aes(x = x1, y = y1, xend = x2, yend = y2, linetype=clustering), color=&quot;#bdf5a2&quot;, linewidth=1) + scale_linetype_manual(values=c(&quot;solid&quot;, &quot;dashed&quot;, &quot;dotted&quot;)) + geom_point(aes(x = Axis.1, y = Axis.2, color = order, size = length), alpha = 0.9, shape = 16) + scale_color_manual(values = order_colors) + theme_minimal() + theme(legend.position = &quot;none&quot;) selected_genomes &lt;- c(&quot;GPB:bin_000009&quot;,&quot;GPB:bin_000021&quot;,&quot;GPB:bin_000208&quot;,&quot;D300452:bin_000016&quot;,&quot;D300444:bin_000010&quot;,&quot;GPB:bin_000140&quot;) #Functional difference matrix genome_gifts[selected_genomes,] %&gt;% to.elements(., GIFT_db) %&gt;% as.data.frame() %&gt;% stats::dist(., method = &quot;manhattan&quot;) / ncol(genome_gifts[selected_genomes, ]) GPB:bin_000009 GPB:bin_000021 GPB:bin_000208 D300452:bin_000016 D300444:bin_000010 GPB:bin_000021 0.17892063 GPB:bin_000208 0.18403175 0.07406349 D300452:bin_000016 0.19073016 0.07498413 0.04365079 D300444:bin_000010 0.17415873 0.07612698 0.07488889 0.07136508 GPB:bin_000140 0.18619048 0.06504762 0.08761905 0.07266667 0.07158730 genome_gifts[selected_genomes, ] %&gt;% to.elements(.,GIFT_db=GIFT_db) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;genome&quot;) %&gt;% pivot_longer(!genome, names_to = &quot;trait&quot;, values_to = &quot;gift&quot;) %&gt;% mutate(functionid = substr(trait, 1, 3)) %&gt;% mutate(trait = case_when( trait %in% GIFT_db$Code_element ~ GIFT_db$Element[match(trait, GIFT_db$Code_element)], TRUE ~ trait )) %&gt;% filter(!functionid %in% c(&quot;D04&quot;,&quot;D08&quot;,&quot;B09&quot;,&quot;B10&quot;,&quot;S01&quot;,&quot;S02&quot;,&quot;S03&quot;)) %&gt;% mutate(functionid = case_when( functionid %in% GIFT_db$Code_function ~ GIFT_db$Function[match(functionid, GIFT_db$Code_function)], TRUE ~ functionid )) %&gt;% mutate(genome=factor(genome,levels=selected_genomes)) %&gt;% mutate(trait=factor(trait,levels=unique(GIFT_db$Element))) %&gt;% mutate(functionid=factor(functionid,levels=unique(GIFT_db$Function))) %&gt;% ggplot(aes(x=genome,y=trait,fill=gift)) + geom_tile(colour=&quot;white&quot;, linewidth=0.2)+ scale_fill_gradientn(colours=rev(c(&quot;#d53e4f&quot;, &quot;#f46d43&quot;, &quot;#fdae61&quot;, &quot;#fee08b&quot;, &quot;#e6f598&quot;, &quot;#abdda4&quot;, &quot;#ddf1da&quot;)))+ facet_grid(functionid ~ ., scales=&quot;free&quot;,space=&quot;free&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), strip.text.y = element_text(angle = 0)) + labs(y=&quot;Traits&quot;,x=&quot;Samples&quot;,fill=&quot;GIFT&quot;) selected_genomes &lt;- c(&quot;GPB:bin_000208&quot;,&quot;D300452:bin_000016&quot;,&quot;TG5_28:bin_000003&quot;,&quot;D300509:bin_000001&quot;,&quot;GPB:bin_000123&quot;,&quot;GPB:bin_000124&quot;,&quot;GPB:bin_000194&quot;) #Functional difference matrix genome_gifts[selected_genomes,] %&gt;% to.elements(., GIFT_db) %&gt;% as.data.frame() %&gt;% stats::dist(., method = &quot;manhattan&quot;) / ncol(genome_gifts[selected_genomes, ]) GPB:bin_000208 D300452:bin_000016 TG5_28:bin_000003 D300509:bin_000001 GPB:bin_000123 D300452:bin_000016 0.04365079 TG5_28:bin_000003 0.07638095 0.06092063 D300509:bin_000001 0.07377778 0.06441270 0.03504762 GPB:bin_000123 0.08888889 0.08930159 0.08749206 0.07498413 GPB:bin_000124 0.07688889 0.06784127 0.06711111 0.06292063 0.09047619 GPB:bin_000194 0.08177778 0.06574603 0.07212698 0.07815873 0.10285714 GPB:bin_000124 D300452:bin_000016 TG5_28:bin_000003 D300509:bin_000001 GPB:bin_000123 GPB:bin_000124 GPB:bin_000194 0.08082540 genome_gifts[selected_genomes, ] %&gt;% to.elements(.,GIFT_db=GIFT_db) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;genome&quot;) %&gt;% pivot_longer(!genome, names_to = &quot;trait&quot;, values_to = &quot;gift&quot;) %&gt;% mutate(functionid = substr(trait, 1, 3)) %&gt;% mutate(trait = case_when( trait %in% GIFT_db$Code_element ~ GIFT_db$Element[match(trait, GIFT_db$Code_element)], TRUE ~ trait )) %&gt;% filter(!functionid %in% c(&quot;D04&quot;,&quot;D08&quot;,&quot;B09&quot;,&quot;B10&quot;,&quot;S01&quot;,&quot;S02&quot;,&quot;S03&quot;)) %&gt;% mutate(functionid = case_when( functionid %in% GIFT_db$Code_function ~ GIFT_db$Function[match(functionid, GIFT_db$Code_function)], TRUE ~ functionid )) %&gt;% mutate(genome=factor(genome,levels=selected_genomes)) %&gt;% mutate(trait=factor(trait,levels=unique(GIFT_db$Element))) %&gt;% mutate(functionid=factor(functionid,levels=unique(GIFT_db$Function))) %&gt;% ggplot(aes(x=genome,y=trait,fill=gift)) + geom_tile(colour=&quot;white&quot;, linewidth=0.2)+ scale_fill_gradientn(colours=rev(c(&quot;#d53e4f&quot;, &quot;#f46d43&quot;, &quot;#fdae61&quot;, &quot;#fee08b&quot;, &quot;#e6f598&quot;, &quot;#abdda4&quot;, &quot;#ddf1da&quot;)))+ facet_grid(functionid ~ ., scales=&quot;free&quot;,space=&quot;free&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), strip.text.y = element_text(angle = 0)) + labs(y=&quot;Traits&quot;,x=&quot;Samples&quot;,fill=&quot;GIFT&quot;) "],["hmsc.html", "Chapter 7 HMSC 7.1 Setup 7.2 Define formulas of the Hmsc model 7.3 Define and Hmsc models 7.4 Define MCMC 7.5 Generate Hmsc executables 7.6 Fit Hmsc models (in Mjolnir HPC) 7.7 Assess chaing convergence 7.8 Load data 7.9 Variance partitioning 7.10 Posterior estimates", " Chapter 7 HMSC 7.1 Setup load(&quot;data/data.Rdata&quot;) # Random effects data (study design) StudyDesign &lt;- sample_metadata %&gt;% mutate(sample2=sample) %&gt;% column_to_rownames(&quot;sample2&quot;) %&gt;% mutate(sample = factor(sample)) %&gt;% filter(treatment != &quot;TG0&quot;) %&gt;% #remove controls select(sample) #Calculate normalisation factor to account for genome length normalisation_factor &lt;- genome_metadata %&gt;% mutate(factor=median(length)/length) %&gt;% pull(factor) # Genome count table (quantitative community data) YData &lt;- read_counts %&gt;% mutate(across(where(is.numeric), ~ round(. * normalisation_factor,0) )) %&gt;% mutate(across(where(is.numeric), ~ . +1 )) %&gt;% #add +1 pseudocount to remove zeros mutate(across(where(is.numeric), ~ log(.) )) %&gt;% #log-transform arrange(genome) %&gt;% column_to_rownames(&quot;genome&quot;) %&gt;% select(all_of(row.names(StudyDesign))) %&gt;% #filter only faecal samples as.data.frame() %&gt;% t() # transpose # Fixed effects data (explanatory variables) XData &lt;- sample_metadata %&gt;% column_to_rownames(&quot;sample&quot;) %&gt;% filter(treatment != &quot;TG0&quot;) %&gt;% #remove controls mutate(logseqdepth=read_counts %&gt;% #total log-sequencing depth select(all_of(row.names(StudyDesign))) %&gt;% colSums() %&gt;% log() ) %&gt;% mutate(treatment = factor(treatment, levels = c(&quot;TG5&quot;,&quot;TG4&quot;,&quot;TG2&quot;,&quot;TG3&quot;,&quot;TG1&quot;))) %&gt;% mutate(day=as.numeric(day)) %&gt;% mutate(logseqdepth=as.numeric(logseqdepth)) %&gt;% select(day, treatment, logseqdepth) # Genome phylogeny PData &lt;- genome_tree 7.2 Define formulas of the Hmsc model # Fixed effects formula XFormula = ~day*treatment + logseqdepth # Study design rL.sample = HmscRandomLevel(units = levels(StudyDesign$sample)) 7.3 Define and Hmsc models #Define models model1 = Hmsc(Y=YData, XData = XData, XFormula = XFormula, studyDesign = StudyDesign, phyloTree = PData, distr = &quot;normal&quot;, YScale = TRUE) #Save list of models as an R object. model_list = list(model1=model1) if (!dir.exists(&quot;hmsc&quot;)){dir.create(&quot;hmsc&quot;)} save(model_list, file = &quot;hmsc/hmsc.Rdata&quot;) Upload hmsc/hmsc.Rdata to the HPC respecting the directory structure. 7.4 Define MCMC # How often to sample the MCMC MCMC_samples_list = 250 # The number of MCMC steps between each recording sample MCMC_thin_list = 10 # The number of MCMC chains to use nChains = 4 7.5 Generate Hmsc executables The next chunk generates shell files for every combination of model, MCMC samples and MCMM thinning, ready to be launched as SLURM jobs. modelchains &lt;- expand.grid(model = names(model_list), sample = MCMC_samples_list, thin = MCMC_thin_list) if (!dir.exists(&quot;hmsc&quot;)){dir.create(&quot;hmsc&quot;)} for(i in c(1:nrow(modelchains))){ modelname=as.character(modelchains[i,1]) sample=modelchains[i,2] thin=modelchains[i,3] executablename &lt;- paste0(&quot;hmsc/exe_&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin,&quot;.sh&quot;) fitname &lt;- paste0(&quot;fit_&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin,&quot;.Rdata&quot;) convname &lt;- paste0(&quot;conv_&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin,&quot;.Rdata&quot;) model &lt;- paste0(&#39;model_list$&#39;,modelname) psrf.beta.name &lt;- paste0(&quot;psrf.beta.&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin) psrf.gamma.name &lt;- paste0(&quot;psrf.gamma.&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin) psrf.rho.name &lt;- paste0(&quot;psrf.rho.&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin) jobname &lt;- paste0(&quot;hmsc_&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin) minutes &lt;- 1000 code &lt;- sprintf(&quot;#!/bin/bash #SBATCH --job-name=%s # Job name #SBATCH --nodes=1 #SBATCH --ntasks=4 # Run on 4 CPUs #SBATCH --mail-user=antton.alberdi@sund.ku.dk #SBATCH --mem=96gb # Job memory request #SBATCH --time=%d # In minutes # Activate conda environment module load mamba/1.3.1 source activate /maps/projects/mjolnir1/people/jpl786/AMAC001_fibre_trial/hmsc/hmsc_env # Run R script Rscript -e &#39; library(tidyverse) library(Hmsc) # Load formulas and data load(\\&quot;hmsc.Rdata\\&quot;) # Declare placeholders modelname = \\&quot;%s\\&quot; model = %s fitname = \\&quot;%s\\&quot; convname = \\&quot;%s\\&quot; sample = %d thin = %d nchains = %d # Run model fitting m = sampleMcmc(hM = model, samples = sample, thin = thin, adaptNf=rep(ceiling(0.4*sample*thin),model$nr), transient = ceiling(0.5*sample*thin), nChains = nchains, nParallel = nchains) # Run model cross-validation partition &lt;- createPartition(m, nfolds = 5) cv &lt;- computePredictedValues(m, partition=partition, nChains = 4) # Assess chain convergence mpost = convertToCodaObject(m, spNamesNumbers = c(T,F), covNamesNumbers = c(T,F), Beta = TRUE, Gamma = TRUE, V = FALSE, Sigma = FALSE, Rho = TRUE, Eta = FALSE, Lambda = FALSE, Alpha = FALSE, Omega = FALSE, Psi = FALSE, Delta = FALSE) # Convert to CODA object # Fixed effects assign(paste0(\\&quot;psrf.beta.\\&quot;, modelname,\\&quot;_\\&quot;,sample,\\&quot;_\\&quot;,thin), gelman.diag(mpost$Beta,multivariate=FALSE)$psrf) # Traits assign(paste0(\\&quot;psrf.gamma.\\&quot;, modelname,\\&quot;_\\&quot;,sample,\\&quot;_\\&quot;,thin), gelman.diag(mpost$Gamma,multivariate=FALSE)$psrf) # Phylogeny assign(paste0(\\&quot;psrf.rho.\\&quot;, modelname,\\&quot;_\\&quot;,sample,\\&quot;_\\&quot;,thin), gelman.diag(mpost$Rho,multivariate=FALSE)$psrf) # Write convergence data save(%s, %s, %s, file=convname) # Save model fit object save(m, cv, file=fitname) &#39; &quot;, jobname, minutes, modelname, model, fitname, convname, sample, thin, nChains, psrf.beta.name, psrf.gamma.name, psrf.rho.name) writeLines(code, executablename) } Upload the produced hmsc/exe_XXXXX.sh files to the HPC respecting the directory structure. 7.6 Fit Hmsc models (in Mjolnir HPC) Launch the SLURM jobs by using: #Create and define tmpdir tmpdir=&quot;./tmp&quot; mkdir -p &quot;$tmpdir&quot; export TMPDIR=&quot;$tmpdir&quot; #Or launch them one by one only the ones you want to launch sbatch exe_model1_250_1.sh 7.7 Assess chaing convergence Convergence diagnostic values substantially above 1 indicate lack of convergence. Values below 1.1 are considered good enough # Load all conv file available in the hmsc folder list.files(path = &quot;hmsc&quot;, pattern = &quot;^conv_&quot;, full.names = TRUE, include.dirs = TRUE) %&gt;% lapply(.,load,.GlobalEnv) # Create a merged psrf.beta (genome) plot ls() %&gt;% grep(&quot;^psrf\\\\.beta&quot;, ., value = TRUE) %&gt;% map_dfr(~ { mat &lt;- get(.x) data.frame(modelchain = .x, as.data.frame(mat, , stringsAsFactors = FALSE)) %&gt;% rownames_to_column(var=&quot;parameter&quot;) %&gt;% mutate(model = str_split(modelchain, &quot;_&quot;) %&gt;% map_chr(1) %&gt;% gsub(&quot;psrf.beta.&quot;,&quot;&quot;,.)) %&gt;% mutate(sample = str_split(modelchain, &quot;_&quot;) %&gt;% map_chr(2)) %&gt;% #extract sample info from model name mutate(thin = str_split(modelchain, &quot;_&quot;) %&gt;% map_chr(3)) #extract thin info from model name }) %&gt;% ggplot(.,aes(x=reorder(modelchain,-Point.est.,fun=function(x) {quantile(x, probs = 0.9)}),y=Point.est.)) + geom_violin(fill=&quot;#b8d9e3&quot;, color=&quot;#328da8&quot;) + geom_jitter(alpha=0.3,size=0.2, color=&quot;#a8babf&quot;) + stat_summary(fun=function(x) {quantile(x, probs = 0.9)}, geom=&quot;crossbar&quot;, width=0.2, color=&quot;orange&quot;) + geom_hline(yintercept=1.1, linetype=&quot;dashed&quot;, color = &quot;red&quot;) + ylim(0.9,2)+ labs(x=&quot;Model chains&quot;,y=&quot;Parameter estimates&quot;)+ theme_classic() # Create a merged psrf.gamma (trait) plot ls() %&gt;% grep(&quot;^psrf\\\\.gamma&quot;, ., value = TRUE) %&gt;% map_dfr(~ { mat &lt;- get(.x) data.frame(modelchain = .x, as.data.frame(mat, , stringsAsFactors = FALSE)) %&gt;% rownames_to_column(var=&quot;parameter&quot;) %&gt;% mutate(model = str_split(modelchain, &quot;_&quot;) %&gt;% map_chr(1) %&gt;% gsub(&quot;psrf.gamma.&quot;,&quot;&quot;,.)) %&gt;% mutate(sample = str_split(modelchain, &quot;_&quot;) %&gt;% map_chr(2)) %&gt;% #extract sample info from model name mutate(thin = str_split(modelchain, &quot;_&quot;) %&gt;% map_chr(3)) #extract thin info from model name }) %&gt;% ggplot(.,aes(x=reorder(modelchain,-Point.est.,fun=function(x) {quantile(x, probs = 0.9)}),y=Point.est.)) + geom_violin(fill=&quot;#b8d9e3&quot;, color=&quot;#328da8&quot;) + geom_jitter(alpha=0.3,size=0.2, color=&quot;#a8babf&quot;) + stat_summary(fun=function(x) {quantile(x, probs = 0.9)}, geom=&quot;crossbar&quot;, width=0.2, color=&quot;orange&quot;) + geom_hline(yintercept=1.1, linetype=&quot;dashed&quot;, color = &quot;red&quot;) + ylim(0.9,2)+ labs(x=&quot;Model chains&quot;,y=&quot;Parameter estimates&quot;)+ theme_classic() # Create a merged psrf.rho (phylogeny) plot ls() %&gt;% grep(&quot;^psrf\\\\.rho&quot;, ., value = TRUE) %&gt;% map_dfr(~ { mat &lt;- get(.x) data.frame(modelchain = .x, as.data.frame(mat, , stringsAsFactors = FALSE)) %&gt;% rownames_to_column(var=&quot;parameter&quot;) %&gt;% mutate(model = str_split(modelchain, &quot;_&quot;) %&gt;% map_chr(1) %&gt;% gsub(&quot;psrf.beta.&quot;,&quot;&quot;,.)) %&gt;% mutate(sample = str_split(modelchain, &quot;_&quot;) %&gt;% map_chr(2)) %&gt;% #extract sample info from model name mutate(thin = str_split(modelchain, &quot;_&quot;) %&gt;% map_chr(3)) #extract thin info from model name }) %&gt;% ggplot(.,aes(x=reorder(modelchain,-Point.est.,fun=function(x) {quantile(x, probs = 0.9)}),y=Point.est.)) + geom_violin(fill=&quot;#b8d9e3&quot;, color=&quot;#328da8&quot;) + geom_jitter(alpha=0.3,size=0.2, color=&quot;#a8babf&quot;) + stat_summary(fun=function(x) {quantile(x, probs = 0.9)}, geom=&quot;crossbar&quot;, width=0.2, color=&quot;orange&quot;) + geom_hline(yintercept=1.1, linetype=&quot;dashed&quot;, color = &quot;red&quot;) + ylim(0.9,2)+ labs(x=&quot;Model chains&quot;,y=&quot;Parameter estimates&quot;)+ theme_classic() 7.8 Load data load(&quot;data/data.Rdata&quot;) load(&quot;hmsc/fit_model1_250_10.Rdata&quot;) # Select desired support threshold support_threshold=0.9 negsupport_threshold=1-support_threshold 7.9 Variance partitioning # Compute variance partitioning varpart=computeVariancePartitioning(m) varpart$vals %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;variable&quot;) %&gt;% pivot_longer(!variable, names_to = &quot;genome&quot;, values_to = &quot;value&quot;) %&gt;% mutate(variable=factor(variable, levels=c(&quot;day&quot;,&quot;treatment&quot;,&quot;day:treatment&quot;,&quot;logseqdepth&quot;,&quot;Random: sample&quot;))) %&gt;% group_by(variable) %&gt;% summarise(mean=mean(value)*100,sd=sd(value)*100) %&gt;% tt() .table td.tinytable_css_idnxt6wfjxhirjm2131mou, .table th.tinytable_css_idnxt6wfjxhirjm2131mou { border-bottom: solid 0.1em #d3d8dc; } variable mean sd day 10.685484 9.075688 treatment 32.006682 10.090640 day:treatment 52.969849 10.087036 logseqdepth 4.337985 5.659128 # Basal tree varpart_tree &lt;- genome_tree #Varpart table varpart_table &lt;- varpart$vals %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;variable&quot;) %&gt;% pivot_longer(!variable, names_to = &quot;genome&quot;, values_to = &quot;value&quot;) %&gt;% mutate(genome=factor(genome, levels=rev(varpart_tree$tip.label))) %&gt;% mutate(variable=factor(variable, levels=rev(c(&quot;day&quot;,&quot;treatment&quot;,&quot;day:treatment&quot;,&quot;logseqdepth&quot;,&quot;Random: sample&quot;)))) #Phylums phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% filter(genome %in% varpart_tree$tip.label) %&gt;% arrange(match(genome, varpart_tree$tip.label)) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% select(phylum) colors_alphabetic &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% filter(genome %in% varpart_tree$tip.label) %&gt;% arrange(match(genome, varpart_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% select(colors) %&gt;% pull() # Basal ggtree varpart_tree &lt;- varpart_tree %&gt;% force.ultrametric(.,method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum colors next to the tree tips varpart_tree &lt;- gheatmap(varpart_tree, phylum_colors, offset=-0.2, width=0.1, colnames=FALSE) + scale_fill_manual(values=colors_alphabetic)+ labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap varpart_tree &lt;- varpart_tree + new_scale_fill() # Add variance stacked barplot vertical_tree &lt;- varpart_tree + scale_fill_manual(values=c(&quot;#cccccc&quot;,&quot;#ed8a45&quot;,&quot;#be3e2b&quot;,&quot;#f6de6c&quot;))+ geom_fruit( data=varpart_table, geom=geom_bar, mapping = aes(x=value, y=genome, fill=variable, group=variable), pwidth = 2, offset = 0.05, width= 1, orientation=&quot;y&quot;, stat=&quot;identity&quot;)+ labs(fill=&quot;Variable&quot;) vertical_tree ## Model fit MFCV &lt;- evaluateModelFit(hM=m, predY=cv) mean(MFCV$R2, na.rm = TRUE) [1] 0.3506152 tibble(genome=m$spNames, r2 = MFCV[[2]]) %&gt;% pull(r2) %&gt;% hist() predictive_genomes &lt;- tibble(genome=m$spNames, r2 = MFCV[[2]]) %&gt;% filter(r2&gt;=0.3) # Abundance covered by predictive genomes genome_counts_filt %&gt;% mutate_if(is.numeric, ~ . / sum(.)) %&gt;% right_join(predictive_genomes, by=&quot;genome&quot;) %&gt;% select(-c(genome,r2)) %&gt;% colSums() %&gt;% mean(., na.rm=TRUE) [1] 0.5068659 var_pred_table &lt;- tibble(mag=m$spNames, pred=MFCV$R2, var_pred=MFCV$R2 * varpart$vals[1,], support=getPostEstimate(hM=m, parName=&quot;Beta&quot;)$support %&gt;% .[2,], estimate=getPostEstimate(hM=m, parName=&quot;Beta&quot;)$mean %&gt;% .[2,]) %&gt;% mutate(enrichment=ifelse(support&gt;=support_threshold,&quot;Feral&quot;,&quot;Neutral&quot;)) %&gt;% mutate(enrichment=ifelse(support&lt;=negsupport_threshold,&quot;Domestic&quot;,enrichment)) predictive_mags &lt;- var_pred_table %&gt;% filter(var_pred&gt;=0.005) %&gt;% pull(mag) 7.10 Posterior estimates # Select desired support threshold support=0.9 negsupport=1-support # Basal tree postestimates_tree &lt;- genome_tree # Posterior estimate table post_beta &lt;- getPostEstimate(hM=m, parName=&quot;Beta&quot;)$support %&gt;% as.data.frame() %&gt;% mutate(variable=m$covNames) %&gt;% pivot_longer(!variable, names_to = &quot;genome&quot;, values_to = &quot;value&quot;) %&gt;% mutate(genome=factor(genome, levels=rev(postestimates_tree$tip.label))) %&gt;% mutate(value = case_when( value &gt;= support ~ &quot;Positive&quot;, value &lt;= negsupport ~ &quot;Negative&quot;, TRUE ~ &quot;Neutral&quot;)) %&gt;% mutate(value=factor(value, levels=c(&quot;Positive&quot;,&quot;Neutral&quot;,&quot;Negative&quot;))) %&gt;% pivot_wider(names_from = variable, values_from = value) %&gt;% #select(genome,sp_vulgaris,area_semi,area_urban,sp_vulgarisxarea_semi,sp_vulgarisxarea_urban,season_spring,season_winter,sp_vulgarisxseason_spring,sp_vulgarisxseason_winter) %&gt;% column_to_rownames(var=&quot;genome&quot;) #Phylums phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% filter(genome %in% postestimates_tree$tip.label) %&gt;% arrange(match(genome, postestimates_tree$tip.label)) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% select(phylum) colors_alphabetic &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% filter(genome %in% postestimates_tree$tip.label) %&gt;% arrange(match(genome, postestimates_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% select(colors) %&gt;% pull() # Basal ggtree postestimates_tree &lt;- postestimates_tree %&gt;% force.ultrametric(.,method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips postestimates_tree &lt;- gheatmap(postestimates_tree, phylum_colors, offset=-0.2, width=0.1, colnames=FALSE) + scale_fill_manual(values=colors_alphabetic)+ labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap postestimates_tree &lt;- postestimates_tree + new_scale_fill() # Add posterior significant heatmap postestimates_tree &lt;- gheatmap(postestimates_tree, post_beta, offset=0, width=0.5, colnames=TRUE, colnames_position=&quot;top&quot;,colnames_angle=90, colnames_offset_y=1, hjust=0) + scale_fill_manual(values=c(&quot;#be3e2b&quot;,&quot;#f4f4f4&quot;,&quot;#b2b530&quot;))+ labs(fill=&quot;Trend&quot;) postestimates_tree + vexpand(.25, 1) # expand top ## Predict responses # Select modelchain of interest load(&quot;hmsc/fit_model1_250_10.Rdata&quot;) gradient = c(7:35) gradientlength = length(gradient) #Treatment-specific gradient predictions pred_TG1 &lt;- constructGradient(m, focalVariable = &quot;day&quot;, non.focalVariables = list(logseqdepth=list(1),treatment=list(3,&quot;TG1&quot;)), ngrid=gradientlength) %&gt;% predict(m, Gradient = ., expected = TRUE) %&gt;% do.call(rbind,.) %&gt;% as.data.frame() %&gt;% mutate(day=rep(gradient,1000)) %&gt;% mutate(treatment=rep(&quot;TG1&quot;,gradientlength*1000)) %&gt;% pivot_longer(-c(day,treatment), names_to = &quot;genome&quot;, values_to = &quot;value&quot;) pred_TG2 &lt;- constructGradient(m, focalVariable = &quot;day&quot;, non.focalVariables = list(logseqdepth=list(1),treatment=list(3,&quot;TG2&quot;)), ngrid=gradientlength) %&gt;% predict(m, Gradient = ., expected = TRUE) %&gt;% do.call(rbind,.) %&gt;% as.data.frame() %&gt;% mutate(day=rep(gradient,1000)) %&gt;% mutate(treatment=rep(&quot;TG2&quot;,gradientlength*1000)) %&gt;% pivot_longer(-c(day,treatment), names_to = &quot;genome&quot;, values_to = &quot;value&quot;) pred_TG3 &lt;- constructGradient(m, focalVariable = &quot;day&quot;, non.focalVariables = list(logseqdepth=list(1),treatment=list(3,&quot;TG3&quot;)), ngrid=gradientlength) %&gt;% predict(m, Gradient = ., expected = TRUE) %&gt;% do.call(rbind,.) %&gt;% as.data.frame() %&gt;% mutate(day=rep(gradient,1000)) %&gt;% mutate(treatment=rep(&quot;TG3&quot;,gradientlength*1000)) %&gt;% pivot_longer(-c(day,treatment), names_to = &quot;genome&quot;, values_to = &quot;value&quot;) pred_TG4 &lt;- constructGradient(m, focalVariable = &quot;day&quot;, non.focalVariables = list(logseqdepth=list(1),treatment=list(3,&quot;TG4&quot;)), ngrid=gradientlength) %&gt;% predict(m, Gradient = ., expected = TRUE) %&gt;% do.call(rbind,.) %&gt;% as.data.frame() %&gt;% mutate(day=rep(gradient,1000)) %&gt;% mutate(treatment=rep(&quot;TG4&quot;,gradientlength*1000)) %&gt;% pivot_longer(-c(day,treatment), names_to = &quot;genome&quot;, values_to = &quot;value&quot;) pred_TG5 &lt;- constructGradient(m, focalVariable = &quot;day&quot;, non.focalVariables = list(logseqdepth=list(1),treatment=list(3,&quot;TG5&quot;)), ngrid=gradientlength) %&gt;% predict(m, Gradient = ., expected = TRUE) %&gt;% do.call(rbind,.) %&gt;% as.data.frame() %&gt;% mutate(day=rep(gradient,1000)) %&gt;% mutate(treatment=rep(&quot;TG5&quot;,gradientlength*1000)) %&gt;% pivot_longer(-c(day,treatment), names_to = &quot;genome&quot;, values_to = &quot;value&quot;) pred_all &lt;- rbind(pred_TG1,pred_TG2,pred_TG3,pred_TG4,pred_TG5) 7.10.1 Function level functions_table &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) %&gt;% to.functions(., GIFT_db) %&gt;% as.data.frame() community_functions &lt;- pred_all %&gt;% group_by(treatment, day, genome) %&gt;% mutate(row_id = row_number()) %&gt;% pivot_wider(names_from = genome, values_from = value) %&gt;% ungroup() %&gt;% group_split(row_id) %&gt;% as.list() %&gt;% lapply(., FUN = function(x){x %&gt;% mutate(day=str_c(day,&quot;_&quot;,treatment)) %&gt;% dplyr::select(-c(row_id,treatment)) %&gt;% column_to_rownames(var = &quot;day&quot;) %&gt;% as.data.frame() %&gt;% exp() %&gt;% t() %&gt;% tss() %&gt;% to.community(functions_table,.,GIFT_db) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;day&quot;) %&gt;% separate(day, into=c(&quot;day&quot;,&quot;treatment&quot;), sep=&quot;_&quot;) }) 7.10.2 Biosynthesis do.call(rbind, community_functions) %&gt;% pivot_longer(!c(day,treatment), names_to = &quot;GIFT&quot;, values_to = &quot;value&quot;) %&gt;% mutate(day=as.numeric(day)) %&gt;% filter(GIFT %in% c(&quot;B02&quot;,&quot;B04&quot;,&quot;B07&quot;,&quot;B08&quot;)) %&gt;% ggplot(aes(x=day, y=value, group=day))+ geom_boxplot(outlier.shape = NA) + facet_nested(GIFT ~ treatment, scales=&quot;free&quot;) 7.10.3 Degradation do.call(rbind, community_functions) %&gt;% pivot_longer(!c(day,treatment), names_to = &quot;GIFT&quot;, values_to = &quot;value&quot;) %&gt;% mutate(day=as.numeric(day)) %&gt;% filter(GIFT %in% c(&quot;D03&quot;,&quot;D05&quot;,&quot;D07&quot;,&quot;D09&quot;)) %&gt;% ggplot(aes(x=day, y=value, group=day))+ geom_boxplot(outlier.shape = NA) + facet_nested(GIFT ~ treatment, scales=&quot;free&quot;) 7.10.4 Element level elements_table &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) %&gt;% as.data.frame() community_elements &lt;- pred_all %&gt;% group_by(treatment, day, genome) %&gt;% mutate(row_id = row_number()) %&gt;% pivot_wider(names_from = genome, values_from = value) %&gt;% ungroup() %&gt;% group_split(row_id) %&gt;% as.list() %&gt;% lapply(., FUN = function(x){x %&gt;% mutate(day=str_c(day,&quot;_&quot;,treatment)) %&gt;% dplyr::select(-c(row_id,treatment)) %&gt;% column_to_rownames(var = &quot;day&quot;) %&gt;% as.data.frame() %&gt;% exp() %&gt;% t() %&gt;% tss() %&gt;% to.community(elements_table,.,GIFT_db) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;day&quot;) %&gt;% separate(day, into=c(&quot;day&quot;,&quot;treatment&quot;), sep=&quot;_&quot;) }) community_elements &lt;- do.call(rbind, community_elements) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
